{
  "name": "PrivateToken",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "initial_supply",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getBalance",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "mint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "transfer",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "recipient",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "debug": {
    "debugSymbols": [
      "",
      "eJzdmttqWzEQRf/lPJuDNDO6+VdKHkybQCA4pfab8b/HN0kHZ5BS2qo7eYoDW/aa0dHSOOQwvbx+3+yfX7e7aX2YeFp/O0y7n5vt+bfdfvNrP63Nanrc/jj9PK6mp+eXx2ltj6t3KUvJx1vy9DrVNJMW52hSjnNMtIw/rCaBIXEwJB6GJMCQRBiSBENiDQ6KxUEhHBQcz1oc0Voc01oc1Voc11oc2Voc2xKObQnHtoRjW8KxLeHYlnBsSzi2JRzbEo5tCce2jGNbxrEt49iWcWzLI22bAuW4GBfvUUbatoMy0rYdlJG27aCMtG0HZaRt2ygy0rYdlJG27aCMtG0HZaRtOyg4thUc2wqObQXHtoJjW8GxrVNtG03+iMjSxJEot6QLFcUZJUomR4lDicqFQhXtcArVsR+n8JInQ7+YC1UKiTnqyJZodEo0RM6fbxa1XXdPVTE0sWpsaGJV7NDEqv+jFGIfFsTnBaqlWwtUl7YWqMaLpYgk7SZawzZbzPiajay1MeQjLrH2Jl7OuNd99xsgIXva2uUmaSB82sZbmJ0z7XBKvlZIyy1Vdt/nbLQ1KuozFXJUUqrRoNWWShvImLDsnBI+daJcQ0TtcEO6Xlf/190QZ3LUOd/eEIr5QDFxjWqwrQ7r19on63Aqf3ZJPi07fK5QvwY/b4VB7ivUr82vVKF+zf6jChNneXFazMR62NdsffLC5V7z+lULQO0oC8HTO2r9vgeg9pIZfKB7an3oQKf+48nnf1CHoWPSX6MeOUuIsdlmQobaYSpvzK6eRr5+7Uyz6r5U5itbHRz4eqXP6mGQMoE76+oafxXsrMqKQm4PG75/eN2sqqKzRmXrrFGPSWtNsLP+T2fOuPyEcN3DEI8Px+MbpH5prw==",
      "",
      "eJzdmttq4zAQht9F1yFoDjrlVZZehN0uFEq6bHIX/O7r1pFk0rFFIVGme5UEfodPI/mbccjZvL793J9e3g5HszsbMrsfZ3P8sz+8fzqe9n9PZmc35vnwa3wdNub3y+uz2cGw+ZQCTD5ekuP7VNOEUpyiTTlOMeE8/rQxrIbEqSHxakiCGpKohiSpIQGrBwX0oKAeFD2eBT2iBT2mBT2qBT2uBT2yBT22RT22RT22RT22RT22RT22RT22RT22RT22RT22RT22JT22JT22JT22JT22pZ62TQFznK2L1yg9bdtA6WnbBkpP2zZQetq2gdLTtuso3NO2DZSetm2g9LRtA6WnbRsoemzLemzLemzLemzLemzLemzrRNsCEZUhx6VVII58ibpQYZwVomhzFCmUKH9wiKp9AIfo2a9weM7zoZ9NhyIHxxx1CCUanRANMQNEO1vdtIeikJUzi+ZWziwqXjmz2AuAfHmIYcR14ViCnLWeKwpJ1CHfWRwrSpxuLbEXfA0lZEkCzKsiodBYt0uYnLPr4ZR8XSPOayiU2+dshBplcRNDjnKqJ4ODtLZUdhGtDfPaCeGxEqUHzIomhtdsJ/bE/3pLnM1R5/z6lmDMjZaQalSCXaux2Oy/X41T+d0j+TSv8bhGvzBFfOM1Br5e48KEcq81epd9QN7HefgdZmFMeQzMwvzxGJiFweJeMImyiSm52CKv2XoLBfjgXhguNHA7zHbz+In7BgPGvbg954PiA15zd55GbsbduWXfjLtzG7wVd+jb2thC/mJGi+thLF88f/CgaezwW9EoqQyOUBtnoGlS2YqHiznPQQ5cvcZPut2KAsBQHG3p+ijwVrz5GteIbI1rxEO3dk2wW/mvbM66fEao7mGIw9Mw/ANEG32o",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod storage;\n\ncontract PrivateToken {\n    // Libs\n    use dep::value_note::{\n        balance_utils,\n        utils::{increment, decrement},\n        value_note::{VALUE_NOTE_LEN, ValueNoteMethods},\n    };\n\n    use dep::aztec::note::{\n        note_header::NoteHeader,\n        utils as note_utils,\n    };\n\n    // docs:start:storage-import\n    use crate::storage::Storage;\n    // docs:end:storage-import\n\n    // docs:start:constructor\n    // Constructs the contract and sets `initial_supply` which is fully owned by `owner`.\n    #[aztec(private)]\n    fn constructor(\n        initial_supply: Field, \n        owner: Field\n    )  {\n        let storage = Storage::init();\n        // Insert new note to a set of user notes and emit the newly created encrypted note preimage via oracle call.\n        let owner_balance = storage.balances.at(owner);\n        if (initial_supply != 0) {\n            increment(&mut context, owner_balance, initial_supply, owner);\n        }\n    }\n    // docs:end:constructor\n\n    // docs:start:mint\n    // Mints `amount` of tokens to `owner`.\n    #[aztec(private)]\n    fn mint(\n        amount: Field, \n        owner: Field\n    )  {\n        let storage = Storage::init();\n\n        // Insert new note to a set of user notes and emit the newly created encrypted note preimage via oracle call.\n        let owner_balance = storage.balances.at(owner);\n        increment(&mut context, owner_balance, amount, owner);\n    }\n    // docs:end:mint\n\n    // docs:start:transfer\n    // Transfers `amount` of tokens from msg_sender to a `recipient`.\n    #[aztec(private)]\n    fn transfer(\n        amount: Field, \n        recipient: Field,\n    )  {\n        let storage = Storage::init();\n        let sender = context.msg_sender();\n\n        // Pick from the set of sender's notes to spend amount.\n        let sender_balance = storage.balances.at(sender);\n        decrement(&mut context, sender_balance, amount, sender);\n\n        // Creates new note for the recipient.\n        let recipient_balance = storage.balances.at(recipient);\n        increment(&mut context, recipient_balance, amount, recipient);\n    }\n    // docs:end:transfer\n\n    // docs:start:getBalance\n    // Helper function to get the balance of a user (\"unconstrained\" is a Noir alternative of Solidity's \"view\" function).\n    unconstrained fn getBalance(\n        owner: Field,\n    ) -> Field {\n        let storage = Storage::init();\n\n        // Get the set of notes owned by the user.\n        let owner_balance = storage.balances.at(owner);\n\n        // Return the sum of all notes in the set.\n        balance_utils::get_balance(owner_balance)\n    }\n    // docs:end:getBalance\n\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    // docs:start:compute_note_hash_and_nullifier\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; VALUE_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader { contract_address, nonce, storage_slot };\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, preimage)\n    }\n    // docs:end:compute_note_hash_and_nullifier\n}\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-contracts/src/contracts/private_token_contract/src/main"
      },
      "4": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\nfn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\nfn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nfn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\nfn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\nfn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\nfn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\nfn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "32": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    private_global_variables: PrivateGlobalVariables,\n}\n\n// PublicContextInputs are expected to be provided to each public function\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/abi"
      },
      "34": {
        "source": "use crate::context::PrivateContext;\nuse crate::oracle;\nuse crate::types::point::Point;\n\nfn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\nfn emit_unencrypted_log<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let _ = oracle::logs::emit_unencrypted_log(log);\n    context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/log"
      },
      "40": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\nfn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialise = note_interface.serialise;\n    let preimage = serialise(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    let serialise = note_interface.serialise;\n    let preimage = serialise(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // 0 nonce implies \"transient\" nullifier (must nullify a commitment in this TX).\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.nonce == 0) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(storage_slot, nullifier, preimage, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/note/lifecycle"
      },
      "41": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort},\n    note_interface::NoteInterface,\n    note_header::NoteHeader,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n    utils::compute_unique_siloed_note_hash,\n    utils::compute_inner_note_hash,\n    utils::compute_siloed_note_hash,\n};\nuse crate::messaging::get_commitment_getter_data::make_commitment_getter_data;\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn ensure_note_exists<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: &mut Note,\n) {\n    let saved_note = get_note_internal(storage_slot, note_interface);\n\n    // Only copy over the header to the original note to make sure the preimage is the same.\n    let get_header = note_interface.get_header;\n    let set_header = note_interface.set_header;\n    let note_header = get_header(saved_note);\n    set_header(note, note_header);\n\n    check_note_header(*context, storage_slot, note_interface, *note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, *note);\n    context.push_read_request(note_hash_for_read_request);\n}\n\n// Ensure a note's hash exists in the tree without retrieving the entire\n// notes via the oracle.\n// Modifies the note by populating it with header info.\nfn ensure_note_hash_exists<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: &mut Note,\n) {\n    // Initialize header of note. Must be done before computing note hashes as it initializes the:\n    // - storage slot (used in inner note hash)\n    // - the contract address (used in siloed note hash)\n    // - and the nonce (used in the unique siloed note hash)\n    let set_header = note_interface.set_header;\n    let note_header = NoteHeader {\n        contract_address: (*context).this_address(),\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): should be\n        // real nonce (once public kernel applies nonces).\n        nonce: 0,\n        storage_slot\n    };\n    set_header(note, note_header);\n\n    // Get a note from oracle and early out if it doesn't exist.\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let raw_oracle_ret = oracle::get_commitment::get_commitment(inner_note_hash);\n    let deserialized_oracle_ret = make_commitment_getter_data(raw_oracle_ret, 0);\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): should be\n    // unique_siloed_note_hash once public kernel applies nonces\n    let saved_siloed_note_hash = deserialized_oracle_ret.message;\n\n    assert(saved_siloed_note_hash != 0); // TODO(dbanks12): necessary?\n\n    check_note_header(*context, storage_slot, note_interface, *note);\n\n    // Ensure that the note hash retrieved from oracle matches the one computed from note.\n    let computed_siloed_note_hash = compute_siloed_note_hash(note_interface, *note);\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): should be\n    // compute_note_hash_for_read_or_nullify once public kernel applies nonces\n    assert(computed_siloed_note_hash == saved_siloed_note_hash);\n\n    context.push_read_request(computed_siloed_note_hash);\n}\n\nfn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\nfn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        let mut note_hash_for_read_request = 0;\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            check_note_header(*context, storage_slot, note_interface, note);\n            note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n        };\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n        // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n        context.push_read_request(note_hash_for_read_request);\n    };\n\n    // TODO(#1660)\n    // Move it back to get_notes_internal and only make read request for selected notes.\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/note/note_getter"
      },
      "43": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\nfn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\nfn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/note/note_hash"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{Select, Sort};\nuse crate::types::vec::BoundedVec;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N> NoteViewerOptions<Note, N> {\n    fn new() -> NoteViewerOptions<Note, N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(Option::none()),\n            sorts: BoundedVec::new(Option::none()),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n        }\n    }\n\n   fn select(&mut self, field_index: u8, value: Field) -> Self {\n        self.selects.push(Option::some(Select::new(field_index, value)));\n        *self\n    }\n\n    fn sort(&mut self, field_index: u8, order: u2) -> Self {\n        self.sorts.push(Option::some(Sort::new(field_index, order)));\n        *self\n    }\n\n    fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        self.limit = limit;\n        *self\n    }\n\n    fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n}\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/note/note_viewer_options"
      },
      "47": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nfn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\nfn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\nfn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    if (header.nonce == 0) {\n        // when nonce is zero, that means we are reading a pending note (doesn't have a nonce yet),\n        // so we just read the inner_note_hash (kernel will silo by contract address)\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\nfn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    let mut note = deserialise(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/note/utils"
      },
      "50": {
        "source": "struct Map<V> {\n    storage_slot: Field,\n    state_var_constructor: fn (Field) -> V,\n}\n\nimpl<V> Map<V> {\n    fn new(storage_slot: Field, state_var_constructor: fn (Field) -> V) -> Map<V> {\n        assert(storage_slot != 0); // Storage slot 0 not allowed. Storage slots must start from 1.\n        Map { storage_slot, state_var_constructor }\n    }\n\n    fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([\n            self.storage_slot, \n            key,\n        ])[0];\n\n        let state_var_constructor = self.state_var_constructor; \n        state_var_constructor(derived_storage_slot)\n    }\n}\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/state_vars/map"
      },
      "52": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_READ_REQUESTS_PER_CALL, MAX_NOTES_PER_PAGE};\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::lifecycle::{create_note, create_note_hash_from_public, destroy_note};\nuse crate::note::{\n    note_getter::{get_notes, ensure_note_exists, ensure_note_hash_exists, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_inner_note_hash,\n};\n\nstruct Set<Note, N> {\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n\nimpl<Note, N> Set<Note, N> {\n    fn new(storage_slot: Field, note_interface: NoteInterface<Note, N>) -> Self {\n        assert(storage_slot != 0); // Storage slot 0 not allowed. Storage slots must start from 1.\n        Set { storage_slot, note_interface }\n    }\n\n    fn insert(self, context: &mut PrivateContext, note: &mut Note) {\n        create_note(context, self.storage_slot, note, self.note_interface);\n    }\n\n    fn insert_from_public(self, context: &mut PublicContext, note: &mut Note) {\n        create_note_hash_from_public(context, self.storage_slot, note, self.note_interface);\n    }\n\n    // TODO(#1386)\n    // Should be replaced by `assert_contains_and_remove`.\n    fn assert_contains_note_and_remove(self, context: &mut PrivateContext, note: Note) {\n        let mut note_with_header = note;\n        ensure_note_exists(context, self.storage_slot, self.note_interface, &mut note_with_header);\n        self.remove(context, note_with_header);\n    }\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386):\n    // replace function above ^ once public kernel injects\n    // nonces to note hashes.\n    fn assert_contains_and_remove(self, context: &mut PrivateContext, note: Note) {\n        let mut note_with_header = note;\n        // Modifies note with the header which is necessary for the next step (remove).\n        ensure_note_hash_exists(context, self.storage_slot, self.note_interface, &mut note_with_header);\n\n        let get_header = self.note_interface.get_header;\n        let set_header = self.note_interface.set_header;\n        let mut header = get_header(note);\n        // Set the nonce to nonzero so that the nullifier is treated as persistable\n        // (non-transient) and so the private kernel does not attempt to match it to\n        // a pending noteHash/commitment and squash them.\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): remove\n        // this hack once public kernel injects nonces.\n        header.nonce = 1;\n        set_header(&mut note_with_header, header);\n\n        self.remove(context, note_with_header);\n    }\n\n    fn remove(self, context: &mut PrivateContext, note: Note) {\n        destroy_note(context, self.storage_slot, note, self.note_interface);\n    }\n\n    fn get_notes<FILTER_ARGS>(\n        self,\n        context: &mut PrivateContext,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(context, storage_slot, self.note_interface, options);\n        opt_notes\n    }\n\n    unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n}\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/state_vars/set"
      },
      "56": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n}\n\n// #[test]\n// fn test_vec() {\n//     let vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n//     assert(vec.len == 0);\n//     let vec1 = vec.push(1);\n//     assert(vec1.len == 1);\n//     let vec2 = vec1.push(1);\n//     assert(vec2.len == 2);\n//     let vec3 = vec2.push(1);\n//     assert(vec3.len == 3);\n//     let x = vec3.pop();\n//     assert(x == 1);\n// }",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/types/vec"
      },
      "61": {
        "source": "fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/utils"
      },
      "71": {
        "source": "use crate::types::point::Point;\nuse dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\nfn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0];\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/oracle/get_public_key"
      },
      "72": {
        "source": "use crate::types::point::Point;\nuse crate::oracle::get_public_key::get_public_key;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(_owner: Point) -> Field {}\n\nunconstrained fn get_secret_key(owner: Field) -> Field {\n    let owner_nullifying_public_key = get_public_key(owner);\n    get_secret_key_oracle(owner_nullifying_public_key)\n}",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/oracle/get_secret_key"
      },
      "73": {
        "source": "\n\n#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained fn rand() -> Field {\n    rand_oracle()\n}\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/oracle/rand"
      },
      "76": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _storage_slot: Field,\n    _nullifier: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_nullified_note<N>(\n    storage_slot: Field,\n    nullifier: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(storage_slot, nullifier, preimage, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialise the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialise the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_some.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let header = NoteHeader { contract_address, nonce, storage_slot };\n            let is_some = fields[read_offset + 1] as bool;\n            if is_some {\n                let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n                let mut note = deserialise(preimage);\n                set_header(&mut note, header);\n                placeholder_opt_notes[i] = Option::some(note);\n            }\n        };\n    };\n    placeholder_opt_notes\n}\n\nunconstrained fn is_nullifier_emitted(nullifier: Field) -> bool {\n    // TODO\n    nullifier == 0\n}",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/oracle/notes"
      },
      "78": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_message: T)  -> Field {}\n\nunconstrained fn emit_unencrypted_log<T>(message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(message), 0]\n}",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/noir-aztec/src/oracle/logs"
      },
      "81": {
        "source": "use dep::aztec::note::{\n    note_getter::view_notes,\n    note_viewer_options::NoteViewerOptions,\n};\nuse dep::aztec::state_vars::set::Set;\nuse crate::value_note::{VALUE_NOTE_LEN, ValueNote};\n\nunconstrained fn get_balance(set: Set<ValueNote, VALUE_NOTE_LEN>) -> Field {\n    get_balance_with_offset(set, 0)\n}\n\nunconstrained fn get_balance_with_offset(set: Set<ValueNote, VALUE_NOTE_LEN>, offset: u32) -> Field {\n    let mut balance = 0;\n\n    let options = NoteViewerOptions::new().set_offset(offset);\n    let opt_notes = set.view_notes(options);\n    let len = opt_notes.len();\n    for i in 0..len {\n        if opt_notes[i].is_some() {\n            balance += opt_notes[i].unwrap_unchecked().value;\n        }\n    }\n    if (opt_notes[len - 1].is_some()) {\n        balance += get_balance_with_offset(set, offset + opt_notes.len() as u32);\n    }\n\n    balance\n}",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/value-note/src/balance_utils"
      },
      "82": {
        "source": "use dep::std::option::Option;\nuse dep::aztec::constants_gen::MAX_READ_REQUESTS_PER_CALL;\nuse crate::value_note::ValueNote;\n\nfn filter_notes_min_sum(notes: [Option<ValueNote>; MAX_READ_REQUESTS_PER_CALL], min_sum: Field) -> [Option<ValueNote>; MAX_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let mut sum = 0;\n    for i in 0..notes.len() {\n        if notes[i].is_some() & (sum < min_sum as u120) {\n            let note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(note);\n            sum += note.value as u120;\n        }\n    }\n    selected\n}",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/value-note/src/filter"
      },
      "83": {
        "source": "use dep::std::option::Option;\nuse dep::aztec::context::PrivateContext;\n// docs:start:encrypted_import\n\nuse dep::aztec::log::emit_encrypted_log;\n\n// docs:end:encrypted_import\nuse dep::aztec::note::note_getter_options::{NoteGetterOptions, SortOrder};\nuse dep::aztec::oracle::get_public_key::get_public_key;\nuse dep::aztec::state_vars::set::Set;\nuse crate::{\n    filter::filter_notes_min_sum,\n    value_note::{ValueNote, VALUE_NOTE_LEN},\n};\n\n// Sort the note values (0th field) in descending order.\n// Pick the fewest notes whose sum is equal to or greater than `amount`.\nfn create_note_getter_options_for_decreasing_balance(amount: Field) -> NoteGetterOptions<ValueNote, VALUE_NOTE_LEN, Field> {\n    NoteGetterOptions::with_filter(filter_notes_min_sum, amount).sort(0, SortOrder.DESC)\n}\n\n// Creates a new note for the recipient.\n// Inserts it to the recipient's set of notes.\nfn increment(\n    context: &mut PrivateContext,\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    amount: Field,\n    recipient: Field,\n) {\n    let mut note = ValueNote::new(amount, recipient);\n    create_note(context, balance, recipient, &mut note);\n\n    // It won't compile if Set.insert() is in an if statement :(\n    // if amount as u120 > 0 {\n    //     create_note(context, balance, recipient, &mut note);\n    // }\n}\n\n// Find some of the `owner`'s notes whose values add up to the `amount`.\n// Remove those notes.\n// If the value of the removed notes exceeds the requested `amount`, create a new note containing the excess value, so that exactly `amount` is removed.\n// Fail if the sum of the selected notes is less than the amount.\nfn decrement(\n    context: &mut PrivateContext,\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    amount: Field,\n    owner: Field,\n) {\n    let sum = decrement_by_at_most(context, balance, amount, owner);\n    assert(sum == amount);\n}\n\n// Similar to `decrement`, except that it doesn't fail if the decremented amount is less than max_amount.\n// The motivation behind this function is that there is an upper-bound on the number of notes a function may\n// read and nullify. The requested decrementation `amount` might be spread across too many of the `owner`'s\n// notes to 'fit' within this upper-bound, so we might have to remove an amount less than `amount`. A common\n// pattern is to repeatedly call this function across many function calls, until enough notes have been nullified to\n// equal `amount`.\n//\n// It returns the decremented amount, which should be less than or equal to max_amount.\nfn decrement_by_at_most(\n    context: &mut PrivateContext,\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    max_amount: Field,\n    owner: Field,\n) -> Field {\n    let options = create_note_getter_options_for_decreasing_balance(max_amount);\n    let opt_notes = balance.get_notes(context, options);\n\n    let mut decremented = 0;\n    for i in 0..opt_notes.len() {\n        if opt_notes[i].is_some() {\n            decremented += destroy_note(context, balance, owner, opt_notes[i].unwrap_unchecked());\n        }\n    }\n\n    // Add the change value back to the owner's balance.\n    let mut change_value = 0;\n    if decremented as u120 > max_amount as u120 {\n        change_value = decremented - max_amount;\n        decremented -= change_value;\n    }\n    increment(context, balance, change_value, owner);\n\n    decremented\n}\n\nfn create_note(\n    context: &mut PrivateContext,\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    owner: Field,\n    note: &mut ValueNote,\n) {\n    // Insert the new note to the owner's set of notes.\n    balance.insert(context, note);\n\n    // Remove this if statement if we can wrap this create_note function in an if statement.\n    if note.value != 0 {\n        // Emit the newly created encrypted note preimages via oracle calls.\n        // docs:start:encrypted\n        let application_contract_address = (*context).this_address();\n        let note_storage_slot = balance.storage_slot;\n        let encryption_pub_key = get_public_key(owner);\n        let encrypted_data = (*note).serialise();\n\n        emit_encrypted_log(\n            context,\n            application_contract_address,\n            note_storage_slot,\n            encryption_pub_key,\n            encrypted_data,\n        );\n        // docs:end:encrypted\n    }\n}\n\n// Removes the note from the owner's set of notes.\n// Returns the value of the destroyed note.\nfn destroy_note(\n    context: &mut PrivateContext,\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    owner: Field,\n    note: ValueNote,\n) -> Field {\n    // Ensure the note is actually owned by the owner (to prevent user from generating a valid proof while\n    // spending someone else's notes).\n    assert(note.owner == owner);\n\n    balance.remove(context, note);\n    \n    note.value\n}\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/value-note/src/utils"
      },
      "84": {
        "source": "use dep::aztec::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse dep::aztec::oracle::{\n    rand::rand,\n    get_secret_key::get_secret_key,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n\nimpl ValueNote {\n    fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    fn serialise(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    fn deserialise(preimage: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: preimage[0],\n            owner: preimage[1],\n            randomness: preimage[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            self.value, \n            self.owner,\n            self.randomness,\n        ])[0]\n    }\n\n    // docs:start:nullifier\n\n    fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            note_hash_for_nullify,\n            secret,\n        ])[0]\n    }\n\n    // docs:end:nullifier\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialise(preimage: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialise(preimage)\n}\n\nfn serialise(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialise()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialise,\n    serialise,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-libs/value-note/src/value_note"
      },
      "85": {
        "source": "use dep::aztec::state_vars::{\n    map::Map,\n    set::Set\n};\nuse dep::value_note::value_note::{\n    ValueNote,\n    ValueNoteMethods,\n    VALUE_NOTE_LEN,\n};\n\n// docs:start:storage-declaration\n// highlight-next-line:storage-declaration\nstruct Storage {\n    // maps an aztec address to its balance\n    balances: Map<Set<ValueNote, VALUE_NOTE_LEN>>,\n}\n\n// highlight-next-line:storage-declaration\nimpl Storage {\n    fn init() -> Self {\n        Storage {\n            balances: Map::new(1, |slot| Set::new(slot, ValueNoteMethods)),\n        }\n    }\n}\n// docs:end:storage-declaration\n",
        "path": "/mnt/user-data/leila/aztec/aztec-packages/yarn-project/noir-contracts/src/contracts/private_token_contract/src/storage"
      }
    }
  }
}
