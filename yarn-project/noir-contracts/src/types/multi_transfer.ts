/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  Wallet,
} from '@aztec/aztec.js';
import { ContractAbi } from '@aztec/foundation/abi';
import { Fr, Point } from '@aztec/foundation/fields';
import { AztecRPC, PublicKey } from '@aztec/types';

import { MultiTransferContractAbi } from '../artifacts/index.js';

/**
 * Type-safe interface for contract MultiTransfer;
 */
export class MultiTransferContract extends ContractBase {
  private constructor(
    /** The deployed contract's address. */
    address: AztecAddress,
    /** The wallet. */
    wallet: Wallet,
  ) {
    super(address, MultiTransferContractAbi, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async create(
    /** The deployed contract's address. */
    address: AztecAddress,
    /** The wallet. */
    wallet: Wallet,
  ) {
    if (!(await wallet.isContractDeployed(address))) {
      throw new Error('Contract ' + address.toString() + ' is not deployed');
    }
    return new MultiTransferContract(address, wallet);
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(rpc: AztecRPC) {
    return new DeployMethod<MultiTransferContract>(
      Point.ZERO,
      rpc,
      MultiTransferContractAbi,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(rpc: AztecRPC, publicKey: PublicKey) {
    return new DeployMethod<MultiTransferContract>(
      publicKey,
      rpc,
      MultiTransferContractAbi,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Returns this contract's ABI.
   */
  public static get abi(): ContractAbi {
    return MultiTransferContractAbi;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    /** multiTransfer(asset: field, addresses: array, amounts: array, owner: field, batch_transfer_selector: field) */
    multiTransfer: ((
      asset: Fr | bigint | number | { toField: () => Fr },
      addresses: (Fr | bigint | number | { toField: () => Fr })[],
      amounts: (Fr | bigint | number | { toField: () => Fr })[],
      owner: Fr | bigint | number | { toField: () => Fr },
      batch_transfer_selector: Fr | bigint | number | { toField: () => Fr },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
