/* Autogenerated file, do not edit! */
// I'm editing this because I need extra stuff.
  
use dep::std;
use dep::aztec::context::{PrivateContext, PublicContext};
use dep::aztec::constants_gen::RETURN_VALUES_LENGTH;


struct NonNativeTokenContractInterface {
  address: Field,
}

impl NonNativeTokenContractInterface {
  fn at(address: Field) -> Self {
      Self {
          address,
      }
  }
  
  fn addUnshieldedBalance(
    self,
    context: &mut PrivateContext,
    amount: Field,
    recipient: Field
  ) {
    let mut serialised_args = [0; 2];
    serialised_args[0] = amount;
    serialised_args[1] = recipient;

    context.call_public_function(self.address, 0x2ce5fcb5, serialised_args)
  }
  

  fn mint(
    self,
    context: &mut PrivateContext,
    amount: Field,
    owner: Field,
    msg_key: Field,
    secret: Field,
    canceller: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 5];
    serialised_args[0] = amount;
    serialised_args[1] = owner;
    serialised_args[2] = msg_key;
    serialised_args[3] = secret;
    serialised_args[4] = canceller;

    context.call_private_function(self.address, 0x8b8c0c7a, serialised_args)
  }
  
  fn mintPublic(
    self,
    context: PublicContext,
    amount: Field,
    owner_address: Field,
    msg_key: Field,
    secret: Field,
    canceller: Field
  ) -> Field{
    let mut serialised_args = [0; 5];
    serialised_args[0] = amount;
    serialised_args[1] = owner_address;
    serialised_args[2] = msg_key;
    serialised_args[3] = secret;
    serialised_args[4] = canceller;

    let _void = context.call_public_function(self.address, 0x5f497f13, serialised_args);
    1
  }
  

  fn redeemShield(
    self,
    context: &mut PrivateContext,
    amount: Field,
    secret: Field,
    owner: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 3];
    serialised_args[0] = amount;
    serialised_args[1] = secret;
    serialised_args[2] = owner;

    context.call_private_function(self.address, 0x86b60aa5, serialised_args)
  }
  

  fn shield(
    self,
    context: &mut PrivateContext,
    amount: Field,
    secretHash: Field
  ) {
    let mut serialised_args = [0; 2];
    serialised_args[0] = amount;
    serialised_args[1] = secretHash;

    context.call_public_function(self.address, 0x3263f38f, serialised_args)
  }
  

  fn transfer(
    self,
    context: &mut PrivateContext,
    amount: Field,
    sender: Field,
    recipient: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 3];
    serialised_args[0] = amount;
    serialised_args[1] = sender;
    serialised_args[2] = recipient;

    context.call_private_function(self.address, 0xdcd4c318, serialised_args)
  }
  

  fn unshieldTokens(
    self,
    context: &mut PrivateContext,
    amount: Field,
    owner: Field,
    recipient: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 3];
    serialised_args[0] = amount;
    serialised_args[1] = owner;
    serialised_args[2] = recipient;

    context.call_private_function(self.address, 0x90785014, serialised_args)
  }
  

  fn withdraw(
    self,
    context: &mut PrivateContext,
    amount: Field,
    sender: Field,
    recipient: Field,
    callerOnL1: Field
  ) -> [Field; RETURN_VALUES_LENGTH] {
    let mut serialised_args = [0; 4];
    serialised_args[0] = amount;
    serialised_args[1] = sender;
    serialised_args[2] = recipient;
    serialised_args[3] = callerOnL1;

    context.call_private_function(self.address, 0xbe57e3e8, serialised_args)
  }
  

  fn withdrawPublic(
    self,
    context: PublicContext,
    amount: Field,
    recipient: Field,
    callerOnL1: Field
  ) -> Field {
    let mut serialised_args = [0; 3];
    serialised_args[0] = amount;
    serialised_args[1] = recipient;
    serialised_args[2] = callerOnL1;

    let _void = context.call_public_function(self.address, 0xb293d196, serialised_args);

    1
  }
  
}

