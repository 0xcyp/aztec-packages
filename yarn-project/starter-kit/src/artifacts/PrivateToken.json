{
  "name": "PrivateToken",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "initial_supply",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getBalance",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "mint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "transfer",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "sender",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "recipient",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJzVmctOQjEQht+laxbtzPTGqxgXxEtiYtAIO3LeXUXaEixtTGe07iCZnv+jnG+mBw7q+eVus3962e7U+qBQrW8Oave62X6+2+03b3u1NtrblXrY3n+8NAaXlXp8en5Qa72svtcilmIk63M1wnK7UiQdYKUDnHSAlw4I0gFROsBo8QQjngDiCeI2G3GdjbjPRlxoI260EVfaiDsN4k6DuNMg7jSIOw3iToO40yDuNIg7DeJOg7jTKO40ijuN4k4jg3EWQ05wgJcJDMZ1EhiM6yQwGNdJYDCuk8BgXDuBGIzrJDAY10lgMK6TwDBFOwniTpO40yTuNIk7TeJO27px4CgtghCbCRgSDHmdK22tFHS6KqDLpXTkqFuDeYVBgDOOzyV1DZpL6vd1c0n9RkWMeUnsbRClbwBDKFsUsFJMnvJulsuGrz2q3w0/QYkFJQbTRgnRn2qjK5tioVIadcyloXyxXxtYnxpzUXu8oHZ1L2anrk+32amvuD859ZX2Mzn1lQ44OfV4E/4L6voJZHbq+qlmdur/MBu/Uw/PRgKEdGAA69rU6Hz5hLnUm+P/NsOj40cojvBU67y5RBmeB3wow02eD2W4c/OhDLdjPpThHsuHMtw4+VCGuyEfyu+2uBZKGD7T86HM023DeLdFneYKkbNtFPA6zSBbZhAeH3BDvduSyY/n5H0bJaYZbs9+YThdfdqjr3fuVBpMuSrVEKxOpdaWnSZf2+mQYeGsFJfbZXkHxt41oA==",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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"
    ],
    "fileMap": {
      "0": {
        "source": "mod storage;\n\ncontract PrivateToken {\n    // Libs\n    use dep::value_note::{\n        balance_utils,\n        utils::{send_note, spend_notes},\n        value_note::{VALUE_NOTE_LEN, ValueNoteMethods},\n    };\n\n    use dep::aztec::abi;\n    use dep::aztec::abi::PrivateContextInputs;\n    use dep::aztec::context::PrivateContext;\n    use dep::aztec::note::{\n        note_header::NoteHeader,\n        utils as note_utils,\n    };\n    use dep::aztec::log::emit_unencrypted_log;\n\n    // docs:start:storage-import\n    use crate::storage::Storage;\n    // docs:end:storage-import\n\n    // docs:start:constructor\n    // Constructs the contract and sets `initial_supply` which is fully owned by `owner`.\n    fn constructor(\n        //*********************************/\n        // Should eventually be hidden:\n        inputs: PrivateContextInputs,\n        //*********************************/\n        initial_supply: Field, \n        owner: Field\n    ) -> distinct pub abi::PrivateCircuitPublicInputs {\n        let storage = Storage::init();\n        let mut context = PrivateContext::new(inputs, abi::hash_args([initial_supply, owner]));\n\n        // Insert new note to a set of user notes and emit the newly created encrypted note preimage via oracle call.\n        let owner_balance = storage.balances.at(owner);\n        if (initial_supply != 0) {\n            send_note(&mut context, owner_balance, initial_supply, owner);\n            emit_unencrypted_log(&mut context, \"Balance set in constructor\");\n        }\n\n        // Return private circuit public inputs. All private functions need to return this as it is part of the input of the private kernel.\n        context.finish()\n    }\n    // docs:end:constructor\n\n    // docs:start:mint\n    // Mints `amount` of tokens to `owner`.\n    fn mint(\n        //*********************************/\n        // Should eventually be hidden:\n        inputs: PrivateContextInputs,\n        //*********************************/\n        amount: Field, \n        owner: Field\n    ) -> distinct pub abi::PrivateCircuitPublicInputs {\n        let storage = Storage::init();\n        let mut context = PrivateContext::new(inputs, abi::hash_args([amount, owner]));\n\n        // Insert new note to a set of user notes and emit the newly created encrypted note preimage via oracle call.\n        let owner_balance = storage.balances.at(owner);\n        send_note(&mut context, owner_balance, amount, owner);\n        emit_unencrypted_log(&mut context, \"Coins minted\");\n\n        // Return private circuit public inputs. All private functions need to return this as it is part of the input of the private kernel..\n        context.finish()\n    }\n    // docs:end:mint\n\n    // docs:start:transfer\n    // Transfers `amount` of tokens from `sender` to a `recipient`.\n    fn transfer(\n        //*********************************/\n        // Should eventually be hidden:\n        inputs: PrivateContextInputs,\n        //*********************************/\n        amount: Field, \n        sender: Field, \n        recipient: Field,\n    ) -> distinct pub abi::PrivateCircuitPublicInputs {\n        let storage = Storage::init();\n        let mut context = PrivateContext::new(inputs, abi::hash_args([amount, sender, recipient]));\n\n        // Pick from the set of sender's notes to spend amount.\n        let sender_balance = storage.balances.at(sender);\n        spend_notes(&mut context, sender_balance, amount, sender);\n\n        // Creates new note for the recipient.\n        let recipient_balance = storage.balances.at(recipient);\n        send_note(&mut context, recipient_balance, amount, recipient);\n        \n        emit_unencrypted_log(&mut context, \"Coins transferred\");\n\n        // Return private circuit public inputs. All private functions need to return this as it is part of the input of the private kernel..\n        context.finish()\n    }\n    // docs:end:transfer\n\n    // docs:start:getBalance\n    // Helper function to get the balance of a user (\"unconstrained\" is a Noir alternative of Solidity's \"view\" function).\n    unconstrained fn getBalance(\n        owner: Field,\n    ) -> Field {\n        let storage = Storage::init();\n\n        // Get the set of notes owned by the user.\n        let owner_balance = storage.balances.at(owner);\n\n        // Return the sum of all notes in the set.\n        balance_utils::get_balance(owner_balance)\n    }\n    // docs:end:getBalance\n\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; VALUE_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader { contract_address, nonce, storage_slot };\n        note_utils::compute_note_hash_and_nullifier(ValueNoteMethods, note_header, preimage)\n    }\n}\n",
        "path": "/Users/danlee/code/aztec-packages/yarn-project/starter-kit/src/contracts/src/main"
      },
      "4": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\nfn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\nfn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nfn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\nfn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\nfn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\nfn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\nfn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "32": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    private_global_variables: PrivateGlobalVariables,\n}\n\n// PublicContextInputs are expected to be provided to each public function\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/Users/danlee/code/aztec-packages/yarn-project/starter-kit/src/contracts/noir-aztec/src/abi"
      },
      "34": {
        "source": "use crate::context::PrivateContext;\nuse crate::oracle;\nuse crate::types::point::Point;\n\nfn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\nfn emit_unencrypted_log<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let _ = oracle::logs::emit_unencrypted_log(log);\n    context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/Users/danlee/code/aztec-packages/yarn-project/starter-kit/src/contracts/noir-aztec/src/log"
      },
      "40": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\nfn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialise = note_interface.serialise;\n    let preimage = serialise(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    let serialise = note_interface.serialise;\n    let preimage = serialise(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // 0 nonce implies \"transient\" nullifier (must nullify a commitment in this TX).\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.nonce == 0) {\n        // TODO(suyash): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(storage_slot, nullifier, preimage, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/Users/danlee/code/aztec-packages/yarn-project/starter-kit/src/contracts/noir-aztec/src/note/lifecycle"
      },
      "41": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort},\n    note_interface::NoteInterface,\n    note_header::NoteHeader,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n    utils::compute_unique_siloed_note_hash,\n    utils::compute_inner_note_hash,\n    utils::compute_siloed_note_hash,\n};\nuse crate::messaging::get_commitment_getter_data::make_commitment_getter_data;\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn ensure_note_exists<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: &mut Note,\n) {\n    let saved_note = get_note_internal(storage_slot, note_interface);\n\n    // Only copy over the header to the original note to make sure the preimage is the same.\n    let get_header = note_interface.get_header;\n    let set_header = note_interface.set_header;\n    let note_header = get_header(saved_note);\n    set_header(note, note_header);\n\n    check_note_header(*context, storage_slot, note_interface, *note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, *note);\n    context.push_read_request(note_hash_for_read_request);\n}\n\n// Ensure a note's hash exists in the tree without retrieving the entire\n// notes via the oracle.\n// Modifies the note by populating it with header info.\nfn ensure_note_hash_exists<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: &mut Note,\n) {\n    // Initialize header of note. Must be done before computing note hashes as it initializes the:\n    // - storage slot (used in inner note hash)\n    // - the contract address (used in siloed note hash)\n    // - and the nonce (used in the unique siloed note hash)\n    let set_header = note_interface.set_header;\n    let note_header = NoteHeader {\n        contract_address: (*context).this_address(),\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): should be\n        // real nonce (once public kernel applies nonces).\n        nonce: 0,\n        storage_slot\n    };\n    set_header(note, note_header);\n\n    // Get a note from oracle and early out if it doesn't exist.\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let raw_oracle_ret = oracle::get_commitment::get_commitment(inner_note_hash);\n    let deserialized_oracle_ret = make_commitment_getter_data(raw_oracle_ret, 0);\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): should be\n    // unique_siloed_note_hash once public kernel applies nonces\n    let saved_siloed_note_hash = deserialized_oracle_ret.message;\n\n    assert(saved_siloed_note_hash != 0); // TODO(dbanks12): necessary?\n\n    check_note_header(*context, storage_slot, note_interface, *note);\n\n    // Ensure that the note hash retrieved from oracle matches the one computed from note.\n    let computed_siloed_note_hash = compute_siloed_note_hash(note_interface, *note);\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): should be\n    // compute_note_hash_for_read_or_nullify once public kernel applies nonces\n    assert(computed_siloed_note_hash == saved_siloed_note_hash);\n\n    context.push_read_request(computed_siloed_note_hash);\n}\n\nfn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\nfn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        let mut note_hash_for_read_request = 0;\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            check_note_header(*context, storage_slot, note_interface, note);\n            note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n        };\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n        // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n        context.push_read_request(note_hash_for_read_request);\n    };\n\n    // TODO(#1660)\n    // Move it back to get_notes_internal and only make read request for selected notes.\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/Users/danlee/code/aztec-packages/yarn-project/starter-kit/src/contracts/noir-aztec/src/note/note_getter"
      },
      "43": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\nfn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\nfn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/Users/danlee/code/aztec-packages/yarn-project/starter-kit/src/contracts/noir-aztec/src/note/note_hash"
      },
      "47": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nfn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\nfn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\nfn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    if (header.nonce == 0) {\n        // when nonce is zero, that means we are reading a pending note (doesn't have a nonce yet),\n        // so we just read the inner_note_hash (kernel will silo by contract address)\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\nfn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    let mut note = deserialise(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/Users/danlee/code/aztec-packages/yarn-project/starter-kit/src/contracts/noir-aztec/src/note/utils"
      },
      "56": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n}\n\n// #[test]\n// fn test_vec() {\n//     let vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n//     assert(vec.len == 0);\n//     let vec1 = vec.push(1);\n//     assert(vec1.len == 1);\n//     let vec2 = vec1.push(1);\n//     assert(vec2.len == 2);\n//     let vec3 = vec2.push(1);\n//     assert(vec3.len == 3);\n//     let x = vec3.pop();\n//     assert(x == 1);\n// }",
        "path": "/Users/danlee/code/aztec-packages/yarn-project/starter-kit/src/contracts/noir-aztec/src/types/vec"
      },
      "71": {
        "source": "use crate::types::point::Point;\nuse dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\nfn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0];\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/Users/danlee/code/aztec-packages/yarn-project/starter-kit/src/contracts/noir-aztec/src/oracle/get_public_key"
      },
      "82": {
        "source": "use dep::std::option::Option;\nuse dep::aztec::constants_gen::MAX_READ_REQUESTS_PER_CALL;\nuse crate::value_note::ValueNote;\n\nfn filter_notes_min_sum(notes: [Option<ValueNote>; MAX_READ_REQUESTS_PER_CALL], min_sum: Field) -> [Option<ValueNote>; MAX_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let mut sum = 0;\n    for i in 0..notes.len() {\n        if notes[i].is_some() & (sum < min_sum as u120) {\n            let note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(note);\n            sum += note.value as u120;\n        }\n    }\n    selected\n}",
        "path": "/Users/danlee/code/aztec-packages/yarn-project/starter-kit/src/contracts/value-note/src/filter"
      },
      "83": {
        "source": "use dep::aztec::context::PrivateContext;\nuse dep::aztec::log::emit_encrypted_log;\nuse dep::aztec::note::note_getter_options::NoteGetterOptions;\nuse dep::aztec::oracle::get_public_key::get_public_key;\nuse dep::aztec::state_vars::set::Set;\nuse dep::aztec::types::point::Point;\nuse crate::{\n    filter::filter_notes_min_sum,\n    value_note::{ValueNote, VALUE_NOTE_LEN},\n};\n\nfn spend_notes(\n    context: &mut PrivateContext,\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    amount: Field,\n    owner: Field,\n) {\n    let options = NoteGetterOptions::with_filter(filter_notes_min_sum, amount);\n    let opt_notes = balance.get_notes(context, options);\n\n    let mut sum = 0;\n    for i in 0..opt_notes.len() {\n        if opt_notes[i].is_some() {\n            let note = opt_notes[i].unwrap_unchecked();\n\n            // Ensure the notes are actually owned by the owner (to prevent user from generating a valid proof while\n            // spending someone else's notes).\n            assert(note.owner == owner);\n\n            // Removes the note from the owner's set of notes.\n            balance.remove(context, note);\n\n            sum += note.value;\n        }\n    }\n\n    assert(sum as u120 >= amount as u120);\n\n    // Creates change note for the owner.\n    let change_value = sum - amount;\n    let mut change_note = ValueNote::new(change_value, owner);\n    balance.insert(context, &mut change_note);\n\n    // Emit the newly created encrypted note preimages via oracle calls.\n    let mut encrypted_data = [0; VALUE_NOTE_LEN];\n    if change_value != 0 {\n        encrypted_data = change_note.serialise();\n    };\n\n    let encryption_pub_key = get_public_key(owner);\n    emit_encrypted_log(\n        context,\n        (*context).this_address(),\n        balance.storage_slot,\n        encryption_pub_key,\n        encrypted_data,\n    );\n}\n\n/*\n  Spends one note from a set of 4 notes.\n  Details: Reads 4 notes from the user's `balance`: [n_{o}, n_{o+1}, n_{o+2}, n_{o+3}]\n  where \"o\" is the note_offset. Then, spends the note: [n_{o + i}] \n  where \"i\" is the spend_note_index. This gives more control to the user on which\n  note is to be spent. \n*/\nfn spend_one_note(\n    context: &mut PrivateContext,\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    amount: Field,\n    owner: Field,\n    spend_note_offset: u32,\n) {\n    let options = NoteGetterOptions::new().set_limit(1).set_offset(spend_note_offset);\n    let opt_notes = balance.get_notes(context, options);\n\n    // The note should always exist.\n    let note = opt_notes[0].unwrap();\n\n    // Ensure the notes are actually owned by the owner (to prevent user from generating a valid proof while\n    // spending someone else's notes).\n    assert(owner == note.owner);\n\n    // Removes the note from the owner's set of notes.\n    balance.remove(context, note);\n\n    let note_value = note.value;\n    \n    // Assert that the note chosen to spend has enough funds.\n    assert(note_value as u64 >= amount as u64);\n\n    // Creates change note for the owner.\n    let change_value = note_value - amount;\n    let mut change_note = ValueNote::new(change_value, owner);\n\n    // Insert the change note to the owner's sets of notes.\n    balance.insert(context, &mut change_note);\n\n    // Emit the newly created encrypted note preimages via oracle calls.\n    let mut encrypted_data = [0; VALUE_NOTE_LEN];\n    if change_value != 0 {\n        encrypted_data = change_note.serialise();\n    };\n\n    let encryption_pub_key = get_public_key(owner);\n    emit_encrypted_log(\n        context,\n        context.inputs.call_context.storage_contract_address,\n        balance.storage_slot,\n        encryption_pub_key,\n        encrypted_data,\n    );\n}\n\nfn send_note(\n    context: &mut PrivateContext,\n    balance: Set<ValueNote, VALUE_NOTE_LEN>,\n    amount: Field,\n    recipient: Field,\n) {\n     // Creates new note for the recipient.\n    let mut note = ValueNote::new(amount, recipient);\n\n    // Insert the new note to the recipient's set of notes.\n    balance.insert(context, &mut note);\n\n    // Emit the newly created encrypted note preimages via oracle calls.\n    // docs:start:encrypted\n\n    let application_contract_address = (*context).this_address();\n    let note_storage_slot = balance.storage_slot;\n    let encryption_pub_key = get_public_key(recipient);\n    let encrypted_data = note.serialise();\n\n    emit_encrypted_log(\n        context,\n        application_contract_address,\n        note_storage_slot,\n        encryption_pub_key,\n        encrypted_data,\n    );\n\n    // docs:end:encrypted\n}\n\n/*\n  Sends three amounts to three recipients.\n  Why three? Because one private call currently allows `MAX_NEW_COMMITMENTS_PER_CALL = 4` output commitments.\n  So we split the output notes as: 3 to recipients + 1 to the owner (the change note).\n*/\nfn send_notes<NUM_RECIPIENTS>(\n    context: &mut PrivateContext,\n    recipient_balances: [Set<ValueNote, VALUE_NOTE_LEN>; NUM_RECIPIENTS],\n    amounts: [Field; NUM_RECIPIENTS], \n    recipients: [Field; NUM_RECIPIENTS],\n) {\n    for i in 0..recipients.len() {\n        // Creates a new note for the i-th recipients\n        let mut recipient_note = ValueNote::new(amounts[i], recipients[i]);\n\n        // Insert the new notes to the i-th recipient's sets of notes.\n        recipient_balances[i].insert(context, &mut recipient_note);\n\n        // Get recipient encryption keys.\n        let recipient_encryption_pub_key = get_public_key(recipients[i]);\n\n        // Emit the newly created encrypted note preimages via oracle calls.\n        let mut recipient_encrypted_data = [0; VALUE_NOTE_LEN];\n        if recipient_note.value != 0 {\n            recipient_encrypted_data = recipient_note.serialise();\n        };\n        emit_encrypted_log(\n            context,\n            context.inputs.call_context.storage_contract_address,\n            recipient_balances[i].storage_slot,\n            recipient_encryption_pub_key,\n            recipient_encrypted_data,\n        );\n    }\n}",
        "path": "/Users/danlee/code/aztec-packages/yarn-project/starter-kit/src/contracts/value-note/src/utils"
      },
      "84": {
        "source": "use dep::aztec::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse dep::aztec::oracle::{\n    rand::rand,\n    get_secret_key::get_secret_key,\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\nstruct ValueNote {\n    value: Field,\n    owner: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n\nimpl ValueNote {\n    fn new(value: Field, owner: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote {\n            value,\n            owner,\n            randomness,\n            header,\n        }\n    }\n\n    fn serialise(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner, self.randomness]\n    }\n\n    fn deserialise(preimage: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: preimage[0],\n            owner: preimage[1],\n            randomness: preimage[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen([\n            self.value, \n            self.owner,\n            self.randomness,\n        ])[0]\n    }\n\n    // docs:start:nullifier\n\n    fn compute_nullifier(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_read_or_nullify(ValueNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        dep::std::hash::pedersen([\n            note_hash_for_nullify,\n            secret,\n        ])[0]\n    }\n\n    // docs:end:nullifier\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialise(preimage: [Field; VALUE_NOTE_LEN]) -> ValueNote {\n    ValueNote::deserialise(preimage)\n}\n\nfn serialise(note: ValueNote) -> [Field; VALUE_NOTE_LEN] {\n    note.serialise()\n}\n\nfn compute_note_hash(note: ValueNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: ValueNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: ValueNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut ValueNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal ValueNoteMethods = NoteInterface {\n    deserialise,\n    serialise,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
        "path": "/Users/danlee/code/aztec-packages/yarn-project/starter-kit/src/contracts/value-note/src/value_note"
      }
    }
  }
}