// SPDX-License-Identifier: Apache-2.0
// Copyright 2023 Aztec Labs.
pragma solidity >=0.8.18;

import {Test} from "forge-std/Test.sol";

import {Decoder} from "@aztec3/core/Decoder.sol";
import {Rollup} from "@aztec3/core/Rollup.sol";
import {DecoderHelper} from "./DecoderHelper.sol";

import "forge-std/console.sol";

/**
 * Blocks are generated using the `integration_l1_publisher.test.ts` tests.
 * Main use of these test is shorter cycles when updating the decoder contract.
 */
contract DecoderTest is Test {
  Rollup internal rollup;
  DecoderHelper internal helper;

  function setUp() public {
    rollup = new Rollup();
    helper = new DecoderHelper();
  }

  function testEmptyBlock() public {
    uint256[] memory newCommitments = new uint256[](16);
    newCommitments[0] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[1] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[2] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[3] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[4] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[5] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[6] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[7] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[8] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[9] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[10] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[11] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[12] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[13] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[14] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newCommitments[15] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    uint256[] memory newNullifiers = new uint256[](16);
    newNullifiers[0] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[1] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[2] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[3] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[4] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[5] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[6] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[7] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[8] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[9] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[10] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[11] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[12] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[13] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[14] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newNullifiers[15] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    Decoder.PublicDataWrite[] memory newPublicDataWrites = new Decoder.PublicDataWrite[](16);
    newPublicDataWrites[0] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[1] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[2] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[3] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[4] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[5] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[6] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[7] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[8] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[9] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[10] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[11] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[12] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[13] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[14] = Decoder.PublicDataWrite(0x00, 0x00);
    newPublicDataWrites[15] = Decoder.PublicDataWrite(0x00, 0x00);
    uint256[] memory newL2ToL1Msgs = new uint256[](uint256(8));
    newL2ToL1Msgs[0] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newL2ToL1Msgs[1] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newL2ToL1Msgs[2] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newL2ToL1Msgs[3] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newL2ToL1Msgs[4] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newL2ToL1Msgs[5] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newL2ToL1Msgs[6] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newL2ToL1Msgs[7] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    uint256[] memory newContracts = new uint256[](4);
    newContracts[0] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newContracts[1] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newContracts[2] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    newContracts[3] = uint256(0x0000000000000000000000000000000000000000000000000000000000000000);
    Decoder.ContractData[] memory contactData = new Decoder.ContractData[](4);
    contactData[0] = Decoder.ContractData(
      0x0000000000000000000000000000000000000000000000000000000000000000,
      0x0000000000000000000000000000000000000000
    );
    contactData[1] = Decoder.ContractData(
      0x0000000000000000000000000000000000000000000000000000000000000000,
      0x0000000000000000000000000000000000000000
    );
    contactData[2] = Decoder.ContractData(
      0x0000000000000000000000000000000000000000000000000000000000000000,
      0x0000000000000000000000000000000000000000
    );
    contactData[3] = Decoder.ContractData(
      0x0000000000000000000000000000000000000000000000000000000000000000,
      0x0000000000000000000000000000000000000000
    );
    uint256[] memory newL1ToL2Msgs = new uint256[](16);
    newL1ToL2Msgs[0] = uint256(0x0000000000000000000000000000000000000000000000000000000000000401);
    newL1ToL2Msgs[1] = uint256(0x0000000000000000000000000000000000000000000000000000000000000402);
    newL1ToL2Msgs[2] = uint256(0x0000000000000000000000000000000000000000000000000000000000000403);
    newL1ToL2Msgs[3] = uint256(0x0000000000000000000000000000000000000000000000000000000000000404);
    newL1ToL2Msgs[4] = uint256(0x0000000000000000000000000000000000000000000000000000000000000405);
    newL1ToL2Msgs[5] = uint256(0x0000000000000000000000000000000000000000000000000000000000000406);
    newL1ToL2Msgs[6] = uint256(0x0000000000000000000000000000000000000000000000000000000000000407);
    newL1ToL2Msgs[7] = uint256(0x0000000000000000000000000000000000000000000000000000000000000408);
    newL1ToL2Msgs[8] = uint256(0x0000000000000000000000000000000000000000000000000000000000000409);
    newL1ToL2Msgs[9] = uint256(0x000000000000000000000000000000000000000000000000000000000000040a);
    newL1ToL2Msgs[10] = uint256(0x000000000000000000000000000000000000000000000000000000000000040b);
    newL1ToL2Msgs[11] = uint256(0x000000000000000000000000000000000000000000000000000000000000040c);
    newL1ToL2Msgs[12] = uint256(0x000000000000000000000000000000000000000000000000000000000000040d);
    newL1ToL2Msgs[13] = uint256(0x000000000000000000000000000000000000000000000000000000000000040e);
    newL1ToL2Msgs[14] = uint256(0x000000000000000000000000000000000000000000000000000000000000040f);
    newL1ToL2Msgs[15] = uint256(0x0000000000000000000000000000000000000000000000000000000000000410);

    Decoder.Block memory block_empty = Decoder.Block(
      1,
      Decoder.TreeSnapshot(0x0668938c4a4167faa2b5031e427d74d6e38638d2eef68834b70480c5a93f8e15, 0),
      Decoder.TreeSnapshot(0x2d39729fd006096882acfbd350c91fd61883578b4fe35b63cdce3c1993a497ea, 8),
      Decoder.TreeSnapshot(0x2f8dc86ba80d8fcf491fb7a255f4163e4f9601d022ba0be35f13297531073fd8, 0),
      Decoder.TreeSnapshot(0x19c36f7bc2e4116d082865cc0b4ac8e16e9efa00ace9fb2222dd1dfd719cb671, 1),
      Decoder.TreeSnapshot(0x2b36b22912aa963f143c490227bd21e7a44338026b2f6a389cb98e82167c3718, 1),
      0x2b72136df9bc7dc9cbfe6b84ec743e8e1d73dd93aecfa79f18afb86be977d3eb,
      Decoder.TreeSnapshot(0x0668938c4a4167faa2b5031e427d74d6e38638d2eef68834b70480c5a93f8e15, 0),
      Decoder.TreeSnapshot(0x19c36f7bc2e4116d082865cc0b4ac8e16e9efa00ace9fb2222dd1dfd719cb671, 1),
      Decoder.TreeSnapshot(0x0668938c4a4167faa2b5031e427d74d6e38638d2eef68834b70480c5a93f8e15, 16),
      Decoder.TreeSnapshot(0x2d39729fd006096882acfbd350c91fd61883578b4fe35b63cdce3c1993a497ea, 24),
      Decoder.TreeSnapshot(0x2f8dc86ba80d8fcf491fb7a255f4163e4f9601d022ba0be35f13297531073fd8, 4),
      Decoder.TreeSnapshot(0x238b20b7bc1d5190f8e928eb2aa2094412588f9cad6c7862f69c09a9b246d6ed, 2),
      Decoder.TreeSnapshot(0x25d4ca531bca7d097a93bc47d7aa2c4dbcc8d0d5ecf4138849104e363eb52c03, 2),
      0x2b72136df9bc7dc9cbfe6b84ec743e8e1d73dd93aecfa79f18afb86be977d3eb,
      Decoder.TreeSnapshot(0x2be9dc687a1bbe5b10ecac6869ca85a46d9c9afe064f55d2e8e237ba01f4faa3, 16),
      Decoder.TreeSnapshot(0x1a3cc59d6b87c8046f558f7c16e2880c120ad353f83c20c604fdb34458b15a51, 2),
      newCommitments,
      newNullifiers,
      newPublicDataWrites,
      newL2ToL1Msgs,
      newContracts,
      contactData,
      newL1ToL2Msgs
    );

    (bytes32 diffRoot, bytes32 l1ToL2MessagesHash) =
      helper.computeDiffRootAndMessagesHash(block_empty);
    assertEq(
      diffRoot,
      0xe861f905de96ae1d3fcec548d838e11aac2a74fccd23a7950689a46200f875ed,
      "Invalid diff root"
    );

    assertEq(
      l1ToL2MessagesHash,
      0x8aa5c6281fed753c0154da77a3a71f875962b64c12b1d1e28e22b23a32069178,
      "Invalid messages hash"
    );

    (uint256 l2BlockNumber, bytes32 startStateHash, bytes32 endStateHash, bytes32 publicInputsHash)
    = helper.decode(block_empty);

    assertEq(l2BlockNumber, 1, "Invalid block number");
    assertEq(
      startStateHash,
      0x0d8f40f96b99f1ee63dd4a9aaea1e1a2ae75643eeba956543bdd72661c50f490,
      "Invalid start state hash"
    );
    assertEq(
      endStateHash,
      0x56cf9c3a2485b59a603b5779e0ea7da6a86f3d46b06e676962c6af7e86992e22,
      "Invalid end state hash"
    );
    assertEq(
      publicInputsHash,
      0x093389749322222ef68d0c172b00bbfdd4377bc6708dd6ca3d1e78bdeecfceec,
      "Invalid public input hash"
    );

    rollup.process(bytes(""), block_empty);

    assertEq(rollup.rollupStateHash(), endStateHash, "Invalid rollup state hash");
  }

  function buildSnapshots() public {}

  function testMixBlock() public {
    uint256[] memory newCommitments = new uint256[](16);
    newCommitments[0] = uint256(0x0000000000000000000000000000000000000000000000000000000000000120);
    newCommitments[1] = uint256(0x0000000000000000000000000000000000000000000000000000000000000121);
    newCommitments[2] = uint256(0x0000000000000000000000000000000000000000000000000000000000000122);
    newCommitments[3] = uint256(0x0000000000000000000000000000000000000000000000000000000000000123);
    newCommitments[4] = uint256(0x0000000000000000000000000000000000000000000000000000000000000140);
    newCommitments[5] = uint256(0x0000000000000000000000000000000000000000000000000000000000000141);
    newCommitments[6] = uint256(0x0000000000000000000000000000000000000000000000000000000000000142);
    newCommitments[7] = uint256(0x0000000000000000000000000000000000000000000000000000000000000143);
    newCommitments[8] = uint256(0x0000000000000000000000000000000000000000000000000000000000000160);
    newCommitments[9] = uint256(0x0000000000000000000000000000000000000000000000000000000000000161);
    newCommitments[10] = uint256(0x0000000000000000000000000000000000000000000000000000000000000162);
    newCommitments[11] = uint256(0x0000000000000000000000000000000000000000000000000000000000000163);
    newCommitments[12] = uint256(0x0000000000000000000000000000000000000000000000000000000000000180);
    newCommitments[13] = uint256(0x0000000000000000000000000000000000000000000000000000000000000181);
    newCommitments[14] = uint256(0x0000000000000000000000000000000000000000000000000000000000000182);
    newCommitments[15] = uint256(0x0000000000000000000000000000000000000000000000000000000000000183);
    uint256[] memory newNullifiers = new uint256[](16);
    newNullifiers[0] = uint256(0x2e821552fc2f154a221eecafe5eb467db44c102c3990d33c9acf618b72a9dc01);
    newNullifiers[1] = uint256(0x0000000000000000000000000000000000000000000000000000000000000220);
    newNullifiers[2] = uint256(0x0000000000000000000000000000000000000000000000000000000000000221);
    newNullifiers[3] = uint256(0x0000000000000000000000000000000000000000000000000000000000000222);
    newNullifiers[4] = uint256(0x302f616677a32962ffa4c86658d1be45a9ffc0709c6366a7df799ef464ec0d0e);
    newNullifiers[5] = uint256(0x0000000000000000000000000000000000000000000000000000000000000240);
    newNullifiers[6] = uint256(0x0000000000000000000000000000000000000000000000000000000000000241);
    newNullifiers[7] = uint256(0x0000000000000000000000000000000000000000000000000000000000000242);
    newNullifiers[8] = uint256(0x0c0dfd79a3b07046e68235c852cd70c38c4ad9bbb4f9ac975662a87b40392b1c);
    newNullifiers[9] = uint256(0x0000000000000000000000000000000000000000000000000000000000000260);
    newNullifiers[10] = uint256(0x0000000000000000000000000000000000000000000000000000000000000261);
    newNullifiers[11] = uint256(0x0000000000000000000000000000000000000000000000000000000000000262);
    newNullifiers[12] = uint256(0x12bb9e35a9da5f83f60f0a306daba3d8f558ff2bca22be63b4f6ff86623989dd);
    newNullifiers[13] = uint256(0x0000000000000000000000000000000000000000000000000000000000000280);
    newNullifiers[14] = uint256(0x0000000000000000000000000000000000000000000000000000000000000281);
    newNullifiers[15] = uint256(0x0000000000000000000000000000000000000000000000000000000000000282);
    Decoder.PublicDataWrite[] memory newPublicDataWrites = new Decoder.PublicDataWrite[](16);
    newPublicDataWrites[0] = Decoder.PublicDataWrite(0x0520, 0x052a);
    newPublicDataWrites[1] = Decoder.PublicDataWrite(0x0521, 0x052b);
    newPublicDataWrites[2] = Decoder.PublicDataWrite(0x0522, 0x052c);
    newPublicDataWrites[3] = Decoder.PublicDataWrite(0x0523, 0x052d);
    newPublicDataWrites[4] = Decoder.PublicDataWrite(0x0540, 0x054a);
    newPublicDataWrites[5] = Decoder.PublicDataWrite(0x0541, 0x054b);
    newPublicDataWrites[6] = Decoder.PublicDataWrite(0x0542, 0x054c);
    newPublicDataWrites[7] = Decoder.PublicDataWrite(0x0543, 0x054d);
    newPublicDataWrites[8] = Decoder.PublicDataWrite(0x0560, 0x056a);
    newPublicDataWrites[9] = Decoder.PublicDataWrite(0x0561, 0x056b);
    newPublicDataWrites[10] = Decoder.PublicDataWrite(0x0562, 0x056c);
    newPublicDataWrites[11] = Decoder.PublicDataWrite(0x0563, 0x056d);
    newPublicDataWrites[12] = Decoder.PublicDataWrite(0x0580, 0x058a);
    newPublicDataWrites[13] = Decoder.PublicDataWrite(0x0581, 0x058b);
    newPublicDataWrites[14] = Decoder.PublicDataWrite(0x0582, 0x058c);
    newPublicDataWrites[15] = Decoder.PublicDataWrite(0x0583, 0x058d);
    uint256[] memory newL2ToL1Msgs = new uint256[](uint256(8));
    newL2ToL1Msgs[0] = uint256(0x0000000000000000000000000000000000000000000000000000000000000320);
    newL2ToL1Msgs[1] = uint256(0x0000000000000000000000000000000000000000000000000000000000000321);
    newL2ToL1Msgs[2] = uint256(0x0000000000000000000000000000000000000000000000000000000000000340);
    newL2ToL1Msgs[3] = uint256(0x0000000000000000000000000000000000000000000000000000000000000341);
    newL2ToL1Msgs[4] = uint256(0x0000000000000000000000000000000000000000000000000000000000000360);
    newL2ToL1Msgs[5] = uint256(0x0000000000000000000000000000000000000000000000000000000000000361);
    newL2ToL1Msgs[6] = uint256(0x0000000000000000000000000000000000000000000000000000000000000380);
    newL2ToL1Msgs[7] = uint256(0x0000000000000000000000000000000000000000000000000000000000000381);
    uint256[] memory newContracts = new uint256[](4);
    newContracts[0] = uint256(0x26fcb9639d15aabe6d792e23ab12fb9633046d4be6911a60d64471d7560d3f68);
    newContracts[1] = uint256(0x09143b7d4943a3485115d37e7596938a16c91b6055f3837640d8c36b8303bb3c);
    newContracts[2] = uint256(0x06fb5fb553496e5e0b48834087e036acf99d6d935dc2ebf43c82788cb5ed1c6a);
    newContracts[3] = uint256(0x2f4bd77ac2bb5474d48c2856135d18168cd6f69f77143c60b3cc370319419dac);
    Decoder.ContractData[] memory contactData = new Decoder.ContractData[](4);
    contactData[0] = Decoder.ContractData(
      0x0000000000000000000000000000000000000000000000000000000000001020,
      0x2121212121212121212121212121212121212121
    );
    contactData[1] = Decoder.ContractData(
      0x0000000000000000000000000000000000000000000000000000000000001040,
      0x4141414141414141414141414141414141414141
    );
    contactData[2] = Decoder.ContractData(
      0x0000000000000000000000000000000000000000000000000000000000001060,
      0x6161616161616161616161616161616161616161
    );
    contactData[3] = Decoder.ContractData(
      0x0000000000000000000000000000000000000000000000000000000000001080,
      0x8181818181818181818181818181818181818181
    );
    uint256[] memory newL1ToL2Msgs = new uint256[](16);
    newL1ToL2Msgs[0] = uint256(0x0000000000000000000000000000000000000000000000000000000000000401);
    newL1ToL2Msgs[1] = uint256(0x0000000000000000000000000000000000000000000000000000000000000402);
    newL1ToL2Msgs[2] = uint256(0x0000000000000000000000000000000000000000000000000000000000000403);
    newL1ToL2Msgs[3] = uint256(0x0000000000000000000000000000000000000000000000000000000000000404);
    newL1ToL2Msgs[4] = uint256(0x0000000000000000000000000000000000000000000000000000000000000405);
    newL1ToL2Msgs[5] = uint256(0x0000000000000000000000000000000000000000000000000000000000000406);
    newL1ToL2Msgs[6] = uint256(0x0000000000000000000000000000000000000000000000000000000000000407);
    newL1ToL2Msgs[7] = uint256(0x0000000000000000000000000000000000000000000000000000000000000408);
    newL1ToL2Msgs[8] = uint256(0x0000000000000000000000000000000000000000000000000000000000000409);
    newL1ToL2Msgs[9] = uint256(0x000000000000000000000000000000000000000000000000000000000000040a);
    newL1ToL2Msgs[10] = uint256(0x000000000000000000000000000000000000000000000000000000000000040b);
    newL1ToL2Msgs[11] = uint256(0x000000000000000000000000000000000000000000000000000000000000040c);
    newL1ToL2Msgs[12] = uint256(0x000000000000000000000000000000000000000000000000000000000000040d);
    newL1ToL2Msgs[13] = uint256(0x000000000000000000000000000000000000000000000000000000000000040e);
    newL1ToL2Msgs[14] = uint256(0x000000000000000000000000000000000000000000000000000000000000040f);
    newL1ToL2Msgs[15] = uint256(0x0000000000000000000000000000000000000000000000000000000000000410);
    Decoder.Block memory block_mixed = Decoder.Block(
      1,
      Decoder.TreeSnapshot(0x0668938c4a4167faa2b5031e427d74d6e38638d2eef68834b70480c5a93f8e15, 0),
      Decoder.TreeSnapshot(0x2d39729fd006096882acfbd350c91fd61883578b4fe35b63cdce3c1993a497ea, 8),
      Decoder.TreeSnapshot(0x2f8dc86ba80d8fcf491fb7a255f4163e4f9601d022ba0be35f13297531073fd8, 0),
      Decoder.TreeSnapshot(0x19c36f7bc2e4116d082865cc0b4ac8e16e9efa00ace9fb2222dd1dfd719cb671, 1),
      Decoder.TreeSnapshot(0x2b36b22912aa963f143c490227bd21e7a44338026b2f6a389cb98e82167c3718, 1),
      0x2b72136df9bc7dc9cbfe6b84ec743e8e1d73dd93aecfa79f18afb86be977d3eb,
      Decoder.TreeSnapshot(0x0668938c4a4167faa2b5031e427d74d6e38638d2eef68834b70480c5a93f8e15, 0),
      Decoder.TreeSnapshot(0x19c36f7bc2e4116d082865cc0b4ac8e16e9efa00ace9fb2222dd1dfd719cb671, 1),
      Decoder.TreeSnapshot(0x0813349a787d3f13ec3492de8b6a5c06ba871cb7d2533b8859f3c40693384501, 16),
      Decoder.TreeSnapshot(0x01603ab7857ba5568f28275c24a4ab53fe15ac9c8be3ec03df1ed3d10a2b67c8, 24),
      Decoder.TreeSnapshot(0x279f38b90665ef7dae8a59f015029274d7837545f62f1f00ab64ffb714d043e9, 4),
      Decoder.TreeSnapshot(0x12e58befb4676abe3a279ec129e4d48b53eb1b1724a6c01274b39f6122dfc0bf, 2),
      Decoder.TreeSnapshot(0x128683784c66165b4b7acf1502ee0f2ed6e5e614f9992375e5f98b1566f2d20a, 2),
      0x2d9b8d2353587ca56bdf967b4bb8847af3671bd6901e9e28f82c240c6e33129a,
      Decoder.TreeSnapshot(0x2be9dc687a1bbe5b10ecac6869ca85a46d9c9afe064f55d2e8e237ba01f4faa3, 16),
      Decoder.TreeSnapshot(0x1a3cc59d6b87c8046f558f7c16e2880c120ad353f83c20c604fdb34458b15a51, 2),
      newCommitments,
      newNullifiers,
      newPublicDataWrites,
      newL2ToL1Msgs,
      newContracts,
      contactData,
      newL1ToL2Msgs
    );

    (bytes32 diffRoot, bytes32 l1ToL2MessagesHash) =
      helper.computeDiffRootAndMessagesHash(block_mixed);
    assertEq(
      diffRoot,
      0x1b4a0edbf080ae8e5c0eb0223fe336c078980bf09a25d1c6603883e9d5fa53e1,
      "Invalid diff root"
    );

    assertEq(
      l1ToL2MessagesHash,
      0x8aa5c6281fed753c0154da77a3a71f875962b64c12b1d1e28e22b23a32069178,
      "Invalid messages hash"
    );

    (uint256 l2BlockNumber, bytes32 startStateHash, bytes32 endStateHash, bytes32 publicInputsHash)
    = helper.decode(block_mixed);

    assertEq(l2BlockNumber, 1, "Invalid block number");
    assertEq(
      startStateHash,
      0x0d8f40f96b99f1ee63dd4a9aaea1e1a2ae75643eeba956543bdd72661c50f490,
      "Invalid start state hash"
    );
    assertEq(
      endStateHash,
      0xccddb0da31f2ef17862a0fba82bff4915f1b9af08aec31986950dd20420d875c,
      "Invalid end state hash"
    );

    // start state hash: 0x0d8f40f96b99f1ee63dd4a9aaea1e1a2ae75643eeba956543bdd72661c50f490

    assertEq(
      publicInputsHash,
      0x22d3e28669b4e0ba7a5136df22a5c52791c3f29440550a34ab6df16218445122,
      "Invalid public input hash"
    );

    rollup.process(bytes(""), block_mixed);

    assertEq(rollup.rollupStateHash(), endStateHash, "Invalid rollup state hash");
  }
}
