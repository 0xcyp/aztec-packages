// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.18;

import {Test} from "forge-std/Test.sol";

import {Decoder} from "@aztec3/core/Decoder.sol";
import {Rollup} from "@aztec3/core/Rollup.sol";

contract DecodeHelper is Decoder {
  function decode(bytes calldata _l2Block) external pure returns (uint256, bytes32, bytes32, bytes32) {
    return _decode(_l2Block);
  }

  function computeDiffRoot(bytes calldata _l2Block) external pure returns (bytes32) {
    return _computeDiffRoot(_l2Block);
  }
}

// Blocks generated using `circuit_block_builder.test.ts`
contract DecoderTest is Test {
  Rollup internal rollup;
  DecodeHelper internal helper;

  bytes block_1 =
    hex"000000010dab4f2c5004966607528e2de5e46abc49d68ac863a6f3ad3e3d98332ca8989d000000000d4ee51c2e3c7b242113e4cdc73af511db2393fcc96e2916ad77b07d4dd2ee96000000082c21cd9d652b1d55ae6437893ec4189d5cc48db60f44ecd0ce272e3a0fef45360000000011418b0f96de397c0bdec2dda6dc049c9f9715fa62420e5a6e08f3dd0b68fd36000000012ccf6631cb5d548aa25e0c51b9398c89af35fb00b321d40db6cb8f13f44cce2f000000012fab1b1a514c78ff58edcd3a3b5c2bc7aef31979fe781e1e42562a3bb3dec20300000010169ee380f85606a46caf0687853ae1b58c7ee310ada999b018aaeee6f10726ad000000180f0c1d03ac280b15abbdfa91faa6137b216b9c29d83d30c1c9ce925ad4379fa6000000041d0a7346a7b79a35627bea7a9976f559b15e08a0dbe9b30d476716e45b53b3e0000000022c31cc4347e8fc234edd6f195d80ace723b6ac2e1b61edf441f82564add1a29ce2cd9b78453a37ad2a6282c5bb50f6212518ba22aad8cec3a4ebecc22a
  bytes block_2 =
    hex"000000022fab1b1a514c78ff58edcd3a3b5c2bc7aef31979fe781e1e42562a3bb3dec20300000010169ee380f85606a46caf0687853ae1b58c7ee310ada999b018aaeee6f10726ad000000180f0c1d03ac280b15abbdfa91faa6137b216b9c29d83d30c1c9ce925ad4379fa6000000041d0a7346a7b79a35627bea7a9976f559b15e08a0dbe9b30d476716e45b53b3e0000000022c31cc4347e8fc234edd6f195d80ace723b6ac2e1b61edf441f82564add1a29c00000002225eb9dc70cc3fcdc1aecf3cc1e6f55e867f716860af9d5c443992e5ef53199e0000002007adea9ad61001dffea2e33747b5ac05281c68742db2f0cbca3e2ab1725f8b8200000028297b6841853bc53b0eefc7b619317ca3618b22645d499c7b27fc7e38d317363f000000080411d02737fab7554c5ab719b7a06abb99b50c357376aec2ed4bab89008b15e000000003197647907232c971542cd758b8601798ef7653b127f36c1f387d69bd37285bc12ea9d65a04f25099f709da577e279d054438c5b52833f564b3d79c49c

  bytes block_empty_1 =
    hex"000000010dab4f2c5004966607528e2de5e46abc49d68ac863a6f3ad3e3d98332ca8989d000000000d4ee51c2e3c7b242113e4cdc73af511db2393fcc96e2916ad77b07d4dd2ee96000000082c21cd9d652b1d55ae6437893ec4189d5cc48db60f44ecd0ce272e3a0fef45360000000011418b0f96de397c0bdec2dda6dc049c9f9715fa62420e5a6e08f3dd0b68fd36000000012ccf6631cb5d548aa25e0c51b9398c89af35fb00b321d40db6cb8f13f44cce2f000000010dab4f2c5004966607528e2de5e46abc49d68ac863a6f3ad3e3d98332ca8989d000000100d4ee51c2e3c7b242113e4cdc73af511db2393fcc96e2916ad77b07d4dd2ee96000000182c21cd9d652b1d55ae6437893ec4189d5cc48db60f44ecd0ce272e3a0fef4536000000042fe07d4d766850fb0c5f289cb6d71334e2f662146dd7e9693351795a6233b2d00000000211fcecd075e7e86da01708dedfc9671475fe7a879e076d6fe67bf432347eb

  bytes block_empty_2 =
    hex"000000020dab4f2c5004966607528e2de5e46abc49d68ac863a6f3ad3e3d98332ca8989d000000100d4ee51c2e3c7b242113e4cdc73af511db2393fcc96e2916ad77b07d4dd2ee96000000182c21cd9d652b1d55ae6437893ec4189d5cc48db60f44ecd0ce272e3a0fef4536000000042fe07d4d766850fb0c5f289cb6d71334e2f662146dd7e9693351795a6233b2d00000000211fcecd075e7e86da01708dedfc9671475fe7a879e076d6fe67bf432347eb030000000020dab4f2c5004966607528e2de5e46abc49d68ac863a6f3ad3e3d98332ca8989d000000200d4ee51c2e3c7b242113e4cdc73af511db2393fcc96e2916ad77b07d4dd2ee96000000282c21cd9d652b1d55ae6437893ec4189d5cc48db60f44ecd0ce272e3a0fef453600000008171f6f0c0a003a8f676df35d33837d3c634a6975f96e878dc01dcd5b5fb9cd74000000032c7603e4b1a405a86168df365e8b6927b3122e9063da73eb8562d3688d92aa

  
  function setUp() public {
    rollup = new Rollup();
    helper = new DecodeHelper();
  }

  function testEmptyBlocks() public {
    {
      bytes32 diffRoot = helper.computeDiffRoot(block_empty_1);
      assertEq(
        0x5064e7b73cbb2cf66cecd9ee874d30cc654bda2fba26ad1c75f0c9db437b261b,
        diffRoot,
        "Invalid diff root"
      );

      (
        uint256 l2BlockNumber,
        bytes32 startStateHash,
        bytes32 endStateHash,
        bytes32 publicInputsHash
      ) = helper.decode(block_empty_1);

      assertEq(l2BlockNumber, 1, "Invalid block number");
      assertEq(
        startStateHash,
        0x997d827ef06622bb62d3a84c4c1f70bdd4d04bf46a51cb5347e472ae29451e12,
        "Invalid start state hash"
      );
      assertEq(
        endStateHash,
        0xfac2a63d8045423c7fd4bb3d831871b25a686b7e851a2e0f61bbb98113121c57,
        "Invalid end state hash"
      );
      assertEq(
        publicInputsHash,
        0x000f71c3a1c4cd35b16d9f2f05338fa8cd2846493edf8be3d09b7912164460f2,
        "Invalid public input hash"
      );

      rollup.process(bytes(""), block_empty_1);

      assertEq(rollup.rollupStateHash(), endStateHash, "Invalid rollup state hash");
    }

    {
      bytes32 diffRoot = helper.computeDiffRoot(block_empty_2);
      assertEq(
        0x5064e7b73cbb2cf66cecd9ee874d30cc654bda2fba26ad1c75f0c9db437b261b,
        diffRoot,
        "Invalid diff root"
      );

      (
        uint256 l2BlockNumber,
        bytes32 startStateHash,
        bytes32 endStateHash,
        bytes32 publicInputsHash
      ) = helper.decode(block_empty_2);

      assertEq(l2BlockNumber, 2, "Invalid block number");
      assertEq(
        startStateHash,
        0xfac2a63d8045423c7fd4bb3d831871b25a686b7e851a2e0f61bbb98113121c57,
        "Invalid start state hash"
      );
      assertEq(
        endStateHash,
        0xfd02581a23301ab084ff3defaba7f6bfa0753e75ab4688da217aa5603875266d,
        "Invalid end state hash"
      );
      assertEq(
        publicInputsHash,
        0x21dbefde8b542a00893546ab469f6e9bb6714bb22478f15ed84d3e772068b7e7,
        "Invalid public input hash"
      );

      rollup.process(bytes(""), block_empty_2);

      assertEq(rollup.rollupStateHash(), endStateHash, "Invalid rollup state hash");
    }
  }

  function testNonEmptyBlocks() public {
    {
      bytes32 diffRoot = helper.computeDiffRoot(block_1);
      assertEq(
        0xd6a5d2e14edcbd6cf55d88a7296ecd4c24734c5e188de827b815c66ec708ac95,
        diffRoot,
        "Invalid diff root block 1"
      );

      (
        uint256 l2BlockNumber,
        bytes32 startStateHash,
        bytes32 endStateHash,
        bytes32 publicInputsHash
      ) = helper.decode(block_1);

      assertEq(l2BlockNumber, 1, "Invalid block number");
      assertEq(
        startStateHash,
        0x997d827ef06622bb62d3a84c4c1f70bdd4d04bf46a51cb5347e472ae29451e12,
        "Invalid start state hash block 1"
      );
      assertEq(
        endStateHash,
        0xbc4951931d71398752b7d0cdb88a4f04c4cebaf8eeef00b75cd913150ac17883,
        "Invalid end state hash block 1"
      );
      assertEq(
        publicInputsHash,
        0x163323613ec38b4525decb91da4fe92b858f61b2eef1dd3c736fea35aa76b727,
        "Invalid public input hash block 1"
      );

      rollup.process(bytes(""), block_1);

      assertEq(rollup.rollupStateHash(), endStateHash, "Invalid rollup state hash block 1");
    }

    {
      bytes32 diffRoot = helper.computeDiffRoot(block_2);
      assertEq(
        0xec22e817324a6c72e71e02d0c93b7efd82200b23d23fd491de1472ce7291ddf9,
        diffRoot,
        "Invalid diff root block 2"
      );

      (
        uint256 l2BlockNumber,
        bytes32 startStateHash,
        bytes32 endStateHash,
        bytes32 publicInputsHash
      ) = helper.decode(block_2);

      assertEq(l2BlockNumber, 2, "Invalid block number");
      assertEq(
        startStateHash,
        0xbc4951931d71398752b7d0cdb88a4f04c4cebaf8eeef00b75cd913150ac17883,
        "Invalid start state hash block 2"
      );
      assertEq(
        endStateHash,
        0x587bd65c5653f227b0eb6b394656be7dee92319e27a4bbc52147f1ff57b7566c,
        "Invalid end state hash block 2"
      );
      assertEq(
        publicInputsHash,
        0x221146539ac6e2bd6c13564b510a57e13219552337b38ac3d2ea646c238e046c,
        "Invalid public input hash block 2"
      );

      rollup.process(bytes(""), block_2);

      assertEq(rollup.rollupStateHash(), endStateHash, "Invalid rollup state hash");
    }
  }
}
