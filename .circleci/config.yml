# This file uses YAML anchors and aliases to prevent repetition of blocks of config:
# https://support.atlassian.com/bitbucket-cloud/docs/yaml-anchors/
#
# Two primary anchors are checkout and setup_env, called as the first step of almost all jobs:
# - checkout: A custom checkout step to reduce the amount of data downloaded to improve speed.
# - setup_env: Sets up the common environment used by all build steps.
#
# Two CCI executors are used:
# - docker (small): Used only to launch external EC2 instances for big workloads. It's the cheapest option.
# - machine (large): Used for building in CCI itself. 4cpus, 15GB has the optimal power/cost ratio.
#
# The docker executor uses a custom image build in `build_image`. It's specifically streamlined for fast download
# with just enough tools to execute the build system, and launch EC2 instances etc.
#
# There are some `join` steps that are just noops. They are just used to produce cleaner graph rendering in CCI.

version: 2.1

orbs:
  slack: circleci/slack@4.12.1

parameters:
  workflow:
    type: string
    default: "system"

# This build step checks out the code from the repository. It has a hardcoded readonly key to allow the checkout.
# Initially it just fetches the repo metadata for the current commit hash to a depth of 50 commits.
# We need historical commit hashes to calculate diffs between previous and current commits.
# It then checks out the fetched head to actually download the data.
checkout: &checkout
  run:
    name: "Checkout code"
    command: |
      cd $HOME
      mkdir -p .ssh
      chmod 0700 .ssh
      ssh-keyscan -t rsa github.com >> .ssh/known_hosts

      # A read only key for cloning the repository.
      echo $GIT_CHECKOUT_KEY | base64 -d > .ssh/id_rsa

      chmod 0600 .ssh/id_rsa

      # IF YOU'RE CHANGING THIS, YOU ALSO WANT TO CHANGE: build-system/remote_build/remote_build
      # Shallow checkout this commit.
      mkdir -p project
      cd project
      git init
      git remote add origin $CIRCLE_REPOSITORY_URL

      # Only download metadata when fetching.
      git fetch --depth 50 --filter=blob:none origin $CIRCLE_SHA1
      git checkout FETCH_HEAD
      # Initialize submodules recursively (retry 10 times on failure)
      for i in $(seq 1 10); do git submodule update --init --recursive && s=0 && break || s=$? && sleep 10; done; (exit $s)

# This build step checks out the code from the benchmark-archive repository. The key is saved in CircleCi environment in base64 format.
# Initially it just fetches the latest version.
benchmark_archive_setup: &benchmark_archive_setup
  run:
    name: "Add keys for getting the benchmark archive"
    command: |
      cd $HOME
      mkdir -p .ssh
      chmod 0700 .ssh
      ssh-keyscan -t rsa github.com >> .ssh/known_hosts

      # A read-write key for updating the repository.
      echo "$GITHUB_BENCMARK_REPOSITORY_SSH_KEY" | base64 -d > .ssh/id_ed25519

      # This allows github to discern wich key to use.
      echo "Host github.com
        Hostname github.com
        IdentityFile=/root/.ssh/id_rsa

      Host github.com-logs
        Hostname github.com
        IdentityFile=/root/.ssh/id_ed25519" > .ssh/config

      chmod 0600 .ssh/id_ed25519
      ssh-add .ssh/id_ed25519
# Called setup_env to setup a bunch of global variables used throughout the rest of the build process.
# It takes the required CCI environment variables as inputs, and gives them normalised names for the rest of
# the build process. This enables easy running of the build system external to CCI, as used for powerful EC2 builds.
setup_env: &setup_env
  run:
    name: "Setup environment"
    command: ./build-system/scripts/setup_env "$CIRCLE_SHA1" "$CIRCLE_TAG" "$CIRCLE_JOB" "$CIRCLE_REPOSITORY_URL" "$CIRCLE_BRANCH"

# This step is used to save logs from various barretenberg test to the workspace so that they can be used later to parse benchmark values out of them
save_logs: &save_logs
  persist_to_workspace:
    root: /tmp/test-logs
    paths:
      - ./*

jobs:
  barretenberg-wasm-linux-clang:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build barretenberg-wasm-linux-clang 64

  barretenberg-x86_64-linux-gcc:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build barretenberg-x86_64-linux-gcc 64

  barretenberg-x86_64-linux-clang:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build barretenberg-x86_64-linux-clang 64

  barretenberg-x86_64-linux-clang-assert:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build barretenberg-x86_64-linux-clang-assert 64

  barretenberg-stdlib-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 1 stdlib-tests
      - *save_logs

  barretenberg-dsl-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 1 dsl_tests
      - *save_logs

  barretenberg-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_test_script ./scripts/bb-tests.sh barretenberg-x86_64-linux-clang-assert
      - *save_logs

  barretenberg-honk-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 1 honk_tests
      - *save_logs

  barretenberg-proof-system-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 1 proof_system_tests
      - *save_logs

  barretenberg-stdlib-recursion-turbo-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 1 stdlib_recursion_tests --gtest_filter=*turbo*
      - *save_logs

  barretenberg-stdlib-recursion-ultra-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 3 stdlib_recursion_tests --gtest_filter=-*turbo*
      - *save_logs

  barretenberg-join-split-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests barretenberg-x86_64-linux-clang-assert 3 join_split_example_proofs_join_split_tests --gtest_filter=-*full_proof*
      - *save_logs

  bb-bin-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_test_script ./scripts/bin-test.sh barretenberg-x86_64-linux-clang-assert

  barretenberg-benchmark-aggregator:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp/test-logs
      - *checkout
      - *setup_env
      - *benchmark_archive_setup
      - run:
          name: "Test"
          command: store_test_benchmark_logs barretenberg-x86_64-linux-clang-assert

  bb-js:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: build bb.js

  bb-js-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests bb.js

  barretenberg-acir-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: cond_spot_run_build barretenberg-acir-tests 32

  circuits-wasm-linux-clang:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build circuits-wasm-linux-clang 64

  circuits-wasm-linux-clang-assert:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build circuits-wasm-linux-clang-assert 64

  circuits-x86_64-linux-clang-tidy:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build circuits-x86_64-linux-clang-tidy 64

  circuits-x86_64-linux-clang:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build circuits-x86_64-linux-clang 64

  circuits-x86_64-linux-clang-assert:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: cond_spot_run_build circuits-x86_64-linux-clang-assert 64

  circuits-wasm-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests circuits-wasm-linux-clang-assert 1 wasm scripts/a3-tests -*.skip*:*.circuit*
      - *save_logs

  circuits-x86_64-tests:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests circuits-x86_64-linux-clang-assert 1 x86_64 scripts/a3-tests -*.skip*
      - *save_logs

  circuits-end:
    docker:
      - image: cimg/base:current
    resource_class: small
    steps:
      - run:
          name: "Noop"
          command: echo Noop

  l1-contracts:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build l1-contracts

  yarn-project-base:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      # We make the build_manifest in the root available to yarn-project. We should be injecting another
      # build context to docker instead, but that requires modifying the build script from build-system
      # to accept arbitrary arguments to be passed to docker build, so we avoid it for now.
      - run:
          name: "Make build manifest available"
          command: cp build_manifest.json yarn-project/
      - run:
          name: "Build"
          command: build yarn-project-base

  foundation:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build foundation

  aztec-js:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build aztec.js

  aztec-cli:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build aztec-cli

  types:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build types

  l1-artifacts:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build l1-artifacts

  aztec-node:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build aztec-node

  key-store:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build key-store

  noir-contracts:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build noir-contracts

  noir-compiler:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build noir-compiler

  world-state:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build world-state

  merkle-tree:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build merkle-tree

  p2p:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build p2p

  p2p-bootstrap:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build p2p-bootstrap

  acir-simulator:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build acir-simulator

  archiver:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build archiver

  aztec-rpc:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build aztec-rpc

  aztec-sandbox:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build aztec-sandbox

  circuits-js:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build circuits.js

  sequencer-client:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build and test"
          command: build sequencer-client

  end-to-end:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: build end-to-end

  ethereum:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: build ethereum

  rollup-provider:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Build"
          command: build rollup-provider

  e2e-deploy-contract:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_deploy_contract.test.ts

  e2e-zk-token-contract:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_zk_token_contract.test.ts

  e2e-block-building:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_block_building.test.ts

  e2e-nested-contract:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_nested_contract.test.ts

  e2e-cross-chain-messaging:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_cross_chain_messaging.test.ts

  e2e-public-cross-chain-messaging:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_public_cross_chain_messaging.test.ts

  e2e-public-to-private-messaging:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_public_to_private_messaging.test.ts

  e2e-account-contract:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_account_contracts.test.ts

  e2e-pending-commitments-contract:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_pending_commitments_contract.test.ts

  uniswap-trade-on-l1-from-l2:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end uniswap_trade_on_l1_from_l2.test.ts

  integration-archiver-l1-to-l2:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end integration_archiver_l1_to_l2.test.ts

  integration-l1-publisher:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end integration_l1_publisher.test.ts

  e2e-public-token-contract:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_public_token_contract.test.ts

  e2e-p2p:
    docker:
      - image: aztecprotocol/alpine-build-image
    resource_class: small
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "Test"
          command: cond_spot_run_tests end-to-end e2e_p2p_network.test.ts

  e2e-join:
    docker:
      - image: cimg/base:current
    resource_class: small
    steps:
      - run:
          name: "Noop"
          command: echo Noop

  e2e-end:
    docker:
      - image: cimg/base:current
    resource_class: small
    steps:
      - run:
          name: "Noop"
          command: echo Noop

  deploy-npm:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: medium
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "foundation"
          working_directory: foundation
          command: |
            deploy_ecr foundation
            deploy_npm foundation
      - run:
          name: "circuits.js"
          working_directory: circuits.js
          command: |
            deploy_ecr circuits.js
            deploy_npm circuits.js
      - run:
          name: "noir-contracts"
          working_directory: noir-contracts
          command: |
            deploy_ecr noir-contracts
            deploy_npm noir-contracts
      - run:
          name: "l1-artifacts"
          working_directory: l1-artifacts
          command: |
            deploy_ecr l1-artifacts
            deploy_npm l1-artifacts
      - run:
          name: "aztec-ethereum"
          working_directory: ethereum
          command: |
            deploy_ecr ethereum
            deploy_npm ethereum
      - run:
          name: "types"
          working_directory: types
          command: |
            deploy_ecr types
            deploy_npm types
      - run:
          name: "aztec.js"
          working_directory: aztec.js
          command: |
            deploy_ecr aztec.js
            deploy_npm aztec.js
      - run:
          name: "aztec-cli"
          working_directory: aztec-cli
          command: |
            deploy_ecr aztec-cli
            deploy_npm aztec-cli

  deploy-dockerhub:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: medium
    steps:
      - *checkout
      - *setup_env
      - run:
          name: "deploy-sandbox"
          working_directory: aztec-sandbox
          command: |
            deploy_ecr aztec-sandbox
            deploy_dockerhub aztec-sandbox

# Repeatable config for defining the workflow below.
job_defaults:
  tag_regex: &tag_regex /^v.*/
  aztec_job_defaults: &aztec_job_defaults
    filters:
      tags:
        only: *tag_regex
      # ignore 'team' branches
      # the jobs meant to run on these branches should use a different default base
      branches:
        ignore:
          - /^barretenberg\/.*/
          - /^circuits\/.*/
    context:
      - build
      - slack
    post-steps:
      - slack/notify:
          event: fail
          branch_pattern: "master"
  deploy_defaults: &deploy_defaults
    filters:
      branches:
        only:
          - master
          - stage
      tags:
        only: *tag_regex
    context:
      - build
      - slack
    post-steps:
      - slack/notify:
          event: fail
          branch_pattern: "master"
  yarn_project_defaults: &yarn_project_defaults
    requires:
      - yarn-project-base
    <<: *aztec_job_defaults
  e2e_test_defaults: &e2e_test_defaults
    requires:
      - e2e-join
    <<: *aztec_job_defaults
  circuits_defaults: &circuits_defaults
    filters:
      tags:
        only: *tag_regex
      branches:
        ignore:
          - /^barretenberg\/.*/
    context:
      - build
      - slack
    post-steps:
      - slack/notify:
          event: fail
          branch_pattern: "master"
  bb_defaults: &bb_defaults
    filters:
      tags:
        only: *tag_regex
      branches:
        ignore:
          - /^circuits\/.*/
    context:
      - build
      - slack
    post-steps:
      - slack/notify:
          event: fail
          branch_pattern: "master"
  bb_test_defaults: &bb_test_defaults
    requires:
      - barretenberg-x86_64-linux-clang-assert
    <<: *bb_defaults
  circuits-wasm-test_defaults: &circuits-wasm-test_defaults
    requires:
      - circuits-wasm-linux-clang-assert
    <<: *circuits_defaults
  circuits-x86_64-test_defaults: &circuits-x86_64-test_defaults
    requires:
      - circuits-x86_64-linux-clang-assert
    <<: *circuits_defaults
workflows:
  system:
    when:
      equal: [ system, << pipeline.parameters.workflow >> ]
    jobs:
      - barretenberg-x86_64-linux-gcc: *bb_defaults
      - barretenberg-x86_64-linux-clang: *bb_defaults
      - barretenberg-x86_64-linux-clang-assert: *bb_defaults
      - barretenberg-wasm-linux-clang: *bb_defaults
      - barretenberg-proof-system-tests: *bb_test_defaults
      - barretenberg-honk-tests: *bb_test_defaults
      - barretenberg-dsl-tests: *bb_test_defaults
      - barretenberg-tests: *bb_test_defaults
      - barretenberg-stdlib-tests: *bb_test_defaults
      - barretenberg-stdlib-recursion-turbo-tests: *bb_test_defaults
      - barretenberg-stdlib-recursion-ultra-tests: *bb_test_defaults
      - barretenberg-join-split-tests: *bb_test_defaults
      - bb-bin-tests: *bb_test_defaults
      - barretenberg-benchmark-aggregator:
          requires:
            - barretenberg-tests
            - barretenberg-stdlib-tests
            - barretenberg-stdlib-recursion-turbo-tests
            - barretenberg-stdlib-recursion-ultra-tests
            - barretenberg-join-split-tests
          filters:
            branches:
              only:
                - master
          <<: *aztec_job_defaults
      - bb-js:
          requires:
            - barretenberg-wasm-linux-clang
          <<: *aztec_job_defaults
      - bb-js-tests:
          requires:
            - bb-js
          <<: *aztec_job_defaults
      - barretenberg-acir-tests:
          requires:
            - barretenberg-x86_64-linux-clang-assert
            - bb-js
          <<: *aztec_job_defaults
      - circuits-wasm-linux-clang: *circuits_defaults
      - circuits-wasm-linux-clang-assert: *circuits_defaults
      - circuits-x86_64-linux-clang-tidy: *circuits_defaults
      - circuits-x86_64-linux-clang: *circuits_defaults
      - circuits-x86_64-linux-clang-assert: *circuits_defaults
      - circuits-wasm-tests:
          <<: *circuits-wasm-test_defaults
      - circuits-x86_64-tests:
          <<: *circuits-x86_64-test_defaults

      - circuits-end:
          requires:
            - circuits-wasm-linux-clang
            - circuits-wasm-linux-clang-assert
            - circuits-x86_64-linux-clang-tidy
            - circuits-x86_64-linux-clang
            - circuits-x86_64-linux-clang-assert
            - circuits-wasm-tests
            - circuits-x86_64-tests
          <<: *circuits_defaults

      - l1-contracts: *aztec_job_defaults

      - yarn-project-base:
          requires:
            - circuits-wasm-linux-clang
            - l1-contracts
          <<: *aztec_job_defaults

      - aztec-js: *yarn_project_defaults
      - end-to-end: *yarn_project_defaults
      - ethereum: *yarn_project_defaults
      - foundation: *yarn_project_defaults
      - world-state: *yarn_project_defaults
      - acir-simulator: *yarn_project_defaults
      - archiver: *yarn_project_defaults
      - aztec-rpc: *yarn_project_defaults
      - aztec-node: *yarn_project_defaults
      - aztec-cli: *yarn_project_defaults
      - key-store: *yarn_project_defaults
      - merkle-tree: *yarn_project_defaults
      - p2p: *yarn_project_defaults
      - p2p-bootstrap: *yarn_project_defaults
      - l1-artifacts: *yarn_project_defaults
      - noir-contracts: *yarn_project_defaults
      - noir-compiler: *yarn_project_defaults
      - sequencer-client: *yarn_project_defaults
      - types: *yarn_project_defaults
      - circuits-js: *yarn_project_defaults
      - rollup-provider: *yarn_project_defaults
      - aztec-sandbox: *yarn_project_defaults

      - e2e-join:
          requires:
            - aztec-js
            - end-to-end
            - ethereum
            - foundation
            - world-state
            - acir-simulator
            - archiver
            - aztec-rpc
            - aztec-node
            - aztec-cli
            - key-store
            - merkle-tree
            - p2p
            - p2p-bootstrap
            - l1-artifacts
            - noir-contracts
            - noir-compiler
            - sequencer-client
            - types
            - circuits-js
            - rollup-provider
          <<: *aztec_job_defaults

      - e2e-deploy-contract: *e2e_test_defaults
      - e2e-zk-token-contract: *e2e_test_defaults
      - e2e-block-building: *e2e_test_defaults
      - e2e-nested-contract: *e2e_test_defaults
      - e2e-public-token-contract: *e2e_test_defaults
      - e2e-cross-chain-messaging: *e2e_test_defaults
      - e2e-public-cross-chain-messaging: *e2e_test_defaults
      - e2e-public-to-private-messaging: *e2e_test_defaults
      - e2e-account-contract: *e2e_test_defaults
      - e2e-pending-commitments-contract: *e2e_test_defaults
      - uniswap-trade-on-l1-from-l2: *e2e_test_defaults
      - integration-l1-publisher: *e2e_test_defaults
      - integration-archiver-l1-to-l2: *e2e_test_defaults
      - e2e-p2p: *e2e_test_defaults

      - e2e-end:
          requires:
            - e2e-deploy-contract
            - e2e-zk-token-contract
            - e2e-block-building
            - e2e-nested-contract
            - e2e-public-token-contract
            - e2e-cross-chain-messaging
            - e2e-public-cross-chain-messaging
            - e2e-public-to-private-messaging
            - e2e-account-contract
            - e2e-pending-commitments-contract
            - uniswap-trade-on-l1-from-l2
            - integration-l1-publisher
            - integration-archiver-l1-to-l2
            - e2e-p2p
          <<: *aztec_job_defaults

      - deploy-dockerhub:
          requires:
            - e2e-end
            - aztec-sandbox
          <<: *deploy_defaults
      - deploy-npm:
          requires:
            - e2e-end
          <<: *deploy_defaults
